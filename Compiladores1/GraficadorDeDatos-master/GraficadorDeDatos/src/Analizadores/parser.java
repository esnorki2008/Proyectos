
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Nodos.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\007\000\002\005\007\000\002" +
    "\006\003\000\002\006\005\000\002\006\003\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\006\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\006\000\002\014" +
    "\003\000\002\031\003\000\002\031\004\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\006\000\002\015\006\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\002\000\002\020\007\000\002\020\005" +
    "\000\002\021\006\000\002\022\003\000\002\032\003\000" +
    "\002\032\004\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\003\000\002\024" +
    "\006\000\002\033\003\000\002\033\004\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\010\000" +
    "\002\026\006\000\002\027\012\000\002\027\011\000\002" +
    "\030\005\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\012\041\012\045\006\046\013\052\014\001" +
    "\002\000\014\002\ufffb\041\012\045\006\046\013\052\014" +
    "\001\002\000\014\002\ufffa\041\012\045\006\046\013\052" +
    "\014\001\002\000\004\014\165\001\002\000\014\002\ufff8" +
    "\041\012\045\006\046\013\052\014\001\002\000\004\002" +
    "\163\001\002\000\014\002\ufff9\041\012\045\006\046\013" +
    "\052\014\001\002\000\004\014\141\001\002\000\004\014" +
    "\034\001\002\000\004\014\016\001\002\000\004\002\000" +
    "\001\002\000\004\052\020\001\002\000\004\015\033\001" +
    "\002\000\004\025\021\001\002\000\004\006\022\001\002" +
    "\000\004\043\023\001\002\000\004\006\024\001\002\000" +
    "\006\026\uffc0\043\031\001\002\000\004\026\026\001\002" +
    "\000\004\012\027\001\002\000\006\015\uffc2\052\020\001" +
    "\002\000\004\015\uffc3\001\002\000\004\006\024\001\002" +
    "\000\004\026\uffc1\001\002\000\014\002\uffc4\041\uffc4\045" +
    "\uffc4\046\uffc4\052\uffc4\001\002\000\014\031\045\032\042" +
    "\033\040\034\037\044\044\001\002\000\004\015\uffd3\001" +
    "\002\000\004\015\140\001\002\000\004\013\135\001\002" +
    "\000\004\013\132\001\002\000\016\015\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\044\uffcc\001\002\000\004\013\127" +
    "\001\002\000\016\015\uffd2\031\045\032\042\033\040\034" +
    "\037\044\044\001\002\000\004\054\053\001\002\000\004" +
    "\013\046\001\002\000\006\006\050\010\051\001\002\000" +
    "\004\012\052\001\002\000\010\012\uffe8\017\uffe8\043\uffe8" +
    "\001\002\000\010\012\uffe7\017\uffe7\043\uffe7\001\002\000" +
    "\016\015\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\044\uffd0" +
    "\001\002\000\012\035\061\036\054\037\060\040\056\001" +
    "\002\000\004\013\123\001\002\000\014\035\061\036\054" +
    "\037\060\040\056\053\uffca\001\002\000\004\013\104\001" +
    "\002\000\004\053\103\001\002\000\004\013\065\001\002" +
    "\000\004\013\062\001\002\000\006\006\050\010\051\001" +
    "\002\000\004\012\064\001\002\000\014\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\053\uffc8\001\002\000\010\004\067\010" +
    "\071\025\066\001\002\000\010\004\067\010\071\025\066" +
    "\001\002\000\024\012\ufff5\015\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\026\ufff5\043\ufff5\001\002\000\014" +
    "\012\073\020\074\021\072\022\076\023\077\001\002\000" +
    "\024\012\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\026\ufff3\043\ufff3\001\002\000\010\004\ufff0\010" +
    "\ufff0\025\ufff0\001\002\000\014\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\053\uffc6\001\002\000\010\004\ufff1\010\ufff1\025" +
    "\ufff1\001\002\000\010\004\067\010\071\025\066\001\002" +
    "\000\010\004\uffef\010\uffef\025\uffef\001\002\000\010\004" +
    "\uffee\010\uffee\025\uffee\001\002\000\024\012\ufff4\015\ufff4" +
    "\017\ufff4\020\074\021\072\022\076\023\077\026\ufff4\043" +
    "\ufff4\001\002\000\014\020\074\021\072\022\076\023\077" +
    "\026\102\001\002\000\024\012\ufff2\015\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\026\ufff2\043\ufff2\001\002" +
    "\000\016\015\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\044" +
    "\uffcb\001\002\000\004\016\105\001\002\000\004\014\106" +
    "\001\002\000\012\004\067\010\071\015\uffd7\025\066\001" +
    "\002\000\004\017\110\001\002\000\004\012\111\001\002" +
    "\000\014\035\uffc5\036\uffc5\037\uffc5\040\uffc5\053\uffc5\001" +
    "\002\000\004\015\117\001\002\000\014\020\074\021\072" +
    "\022\076\023\077\043\114\001\002\000\014\004\067\010" +
    "\071\015\uffd7\017\uffd7\025\066\001\002\000\006\015\uffd9" +
    "\017\uffd9\001\002\000\020\015\uffd8\017\uffd8\020\074\021" +
    "\072\022\076\023\077\043\114\001\002\000\006\017\uffd5" +
    "\043\120\001\002\000\004\014\106\001\002\000\004\017" +
    "\uffd6\001\002\000\004\053\uffc9\001\002\000\006\006\050" +
    "\010\051\001\002\000\004\012\125\001\002\000\014\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\053\uffc7\001\002\000\004" +
    "\015\uffd1\001\002\000\006\006\050\010\051\001\002\000" +
    "\004\012\131\001\002\000\016\015\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\044\uffcf\001\002\000\006\006\050\010" +
    "\051\001\002\000\004\012\134\001\002\000\016\015\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\044\uffce\001\002\000" +
    "\006\006\050\010\051\001\002\000\004\012\137\001\002" +
    "\000\016\015\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\044" +
    "\uffcd\001\002\000\014\002\uffd4\041\uffd4\045\uffd4\046\uffd4" +
    "\052\uffd4\001\002\000\006\027\142\030\144\001\002\000" +
    "\004\010\156\001\002\000\004\015\155\001\002\000\004" +
    "\010\151\001\002\000\010\015\uffe9\027\142\030\144\001" +
    "\002\000\010\015\uffea\027\142\030\144\001\002\000\004" +
    "\015\uffeb\001\002\000\004\015\uffec\001\002\000\004\042" +
    "\152\001\002\000\006\006\050\010\051\001\002\000\004" +
    "\012\154\001\002\000\010\015\ufff7\027\ufff7\030\ufff7\001" +
    "\002\000\014\002\uffed\041\uffed\045\uffed\046\uffed\052\uffed" +
    "\001\002\000\004\042\157\001\002\000\010\004\067\010" +
    "\071\025\066\001\002\000\014\012\161\020\074\021\072" +
    "\022\076\023\077\001\002\000\010\015\ufff6\027\ufff6\030" +
    "\ufff6\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffc\001\002\000\020\031\177\032" +
    "\170\033\171\034\167\047\173\050\172\051\175\001\002" +
    "\000\004\015\uffe5\001\002\000\004\013\235\001\002\000" +
    "\004\013\232\001\002\000\004\013\227\001\002\000\004" +
    "\013\222\001\002\000\004\013\212\001\002\000\004\015" +
    "\211\001\002\000\004\013\204\001\002\000\022\015\uffe4" +
    "\031\177\032\170\033\171\034\167\047\173\050\172\051" +
    "\175\001\002\000\004\013\200\001\002\000\006\006\050" +
    "\010\051\001\002\000\004\012\202\001\002\000\022\015" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\001\002\000\004\015\uffe3\001\002\000\004\016" +
    "\205\001\002\000\004\014\106\001\002\000\004\017\207" +
    "\001\002\000\004\012\210\001\002\000\022\015\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002\000\014\002\uffe6\041\uffe6\045\uffe6\046\uffe6\052" +
    "\uffe6\001\002\000\004\016\213\001\002\000\006\006\050" +
    "\010\051\001\002\000\006\017\uffda\043\220\001\002\000" +
    "\004\017\216\001\002\000\004\012\217\001\002\000\022" +
    "\015\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\001\002\000\006\006\050\010\051\001\002" +
    "\000\004\017\uffdb\001\002\000\004\016\223\001\002\000" +
    "\012\004\067\010\071\017\uffd7\025\066\001\002\000\004" +
    "\017\225\001\002\000\004\012\226\001\002\000\022\015" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\001\002\000\006\006\050\010\051\001\002\000" +
    "\004\012\231\001\002\000\022\015\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000" +
    "\006\006\050\010\051\001\002\000\004\012\234\001\002" +
    "\000\022\015\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\001\002\000\006\006\050\010\051" +
    "\001\002\000\004\012\237\001\002\000\022\015\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\016\002\007\003\014\010\003\013\010\021" +
    "\004\026\006\001\001\000\014\003\240\010\003\013\010" +
    "\021\004\026\006\001\001\000\014\003\237\010\003\013" +
    "\010\021\004\026\006\001\001\000\002\001\001\000\014" +
    "\003\163\010\003\013\010\021\004\026\006\001\001\000" +
    "\002\001\001\000\014\003\161\010\003\013\010\021\004" +
    "\026\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\027\001" +
    "\001\000\002\001\001\000\004\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\035\023\042\024" +
    "\040\032\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\042\024\040\032\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\054\033\056\001\001\000" +
    "\002\001\001\000\006\025\054\033\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\067\001\001\000\004\006\100\001" +
    "\001\000\002\001\001\000\004\007\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\074\001\001\000\004\007\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\106\001\001\000\006\006\112\017\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\074\001\001\000\006\006" +
    "\115\017\114\001\001\000\002\001\001\000\004\007\074" +
    "\001\001\000\002\001\001\000\004\020\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\144\005\145\011" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\144\005\145\011\147\001\001\000" +
    "\010\004\144\005\145\011\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\157\001\001\000\004\007" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\173\015\175\031" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\175" +
    "\031\202\001\001\000\002\001\001\000\004\012\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\213\016\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\213\016\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\112\017\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String Errores="";
     public LinkedList<GraficaBarra> GB = new LinkedList<GraficaBarra>();
     public LinkedList<GraficaLineas> GL = new LinkedList<GraficaLineas>();
     public LinkedList<NodoGaleria> NG = new LinkedList<NodoGaleria>();
     public LinkedList<VarGlobales> VG = new LinkedList<VarGlobales>();

    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
		Errores=Errores+"El analizador sintactico encontro un \nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no debería estar ahí.";
		
        System.err.println("El analizador sintactico se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no debería estar ahí." );        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		Errores=Errores+"\n"+"El analizador sintactico no se recuperó "+" Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.";
		
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
	
    public boolean Letras(String Letra){
    char[] Ch= Letra.toCharArray();
    for(char C:Ch){
    if(Character.isLetter(C)){return true;}
    }
    return false;
    }
	
    public void setSalida(String cadena)
    {
        salida = cadena;
		salida="";
    }
	
		
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INIT 
            {
              Object RESULT =null;
		int informleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int informright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inform = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  setSalida(inform);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= DGD INIT 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INIT ::= GFD INIT 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INIT ::= GBD INIT 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INIT ::= GLA INIT 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INIT ::= DGD 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT=cadena1;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INIT ::= GFD 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT=cadena1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INIT ::= GBD 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT=cadena1;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INIT ::= GLA 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT=cadena1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STRD ::= string id igual STRG puntocoma 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INTD ::= ink id igual INTC puntocoma 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INTC ::= entero 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INTC ::= INTC SIGNO INTC 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INTC ::= id 
            {
              String RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INTC ::= para INTC parc 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTC",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIGNO ::= suma 
            {
              String RESULT =null;
		 RESULT="+";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIGNO ::= resta 
            {
              String RESULT =null;
		  RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIGNO ::= multi 
            {
              String RESULT =null;
		  RESULT="*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIGNO ::= div 
            {
              String RESULT =null;
		 RESULT="/";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DGD ::= globales llaa DGC llac 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DGD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DGC ::= STRD DGC 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DGC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DGC ::= INTD DGC 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DGC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DGC ::= INTD 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DGC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DGC ::= STRD 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DGC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRG ::= cadena 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STRG ::= id 
            {
              String RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GBD ::= graficabarras llaa GBC llac 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBD",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GBC ::= GBM 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GBM ::= GBP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GBM ::= GBP GBM 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GBP ::= idt dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GBP ::= titulo dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GBP ::= ejex dospuntos cora ARRS corc puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GBP ::= ejey dospuntos cora ARRI corc puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GBP ::= puntosxy dospuntos cora LLO corc puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GBP ::= titulox dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GBP ::= tituloy dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GBP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRS ::= STRG coma ARRS 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRS ::= STRG 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRI ::= INTC coma ARRI 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRI ::= INTC coma INTC 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRI ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLO ::= llaa ARRI llac coma LLO 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLO ::= llaa ARRI llac 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // GFD ::= graficalineas llaa GFC llac 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFD",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GFC ::= GFZ 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFC",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // GFZ ::= GFP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFZ",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GFZ ::= GFP GFZ 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFZ",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GFP ::= idt dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GFP ::= titulo dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GFP ::= titulox dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GFP ::= tituloy dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GFP ::= XYLINE 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GFP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // XYLINE ::= definirxyline prea TOP prec 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XYLINE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TOP ::= XYLINEC 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TOP ::= XYLINEC TOP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // XYLINEC ::= nombre dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XYLINEC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // XYLINEC ::= color dospuntos STRG puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XYLINEC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // XYLINEC ::= grosor dospuntos INTC puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XYLINEC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // XYLINEC ::= puntos dospuntos cora LLO corc puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XYLINEC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GLA ::= galeria llaa GLC llac 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GLC ::= galeria para cadena coma GLP parc puntocoma GLC 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GLC ::= galeria para cadena coma GLP parc puntocoma 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GLP ::= cadena coma GLP 
            {
              String RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GLP ::= cadena 
            {
              String RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
