/* The following code was generated by JFlex 1.7.0 */

package Analisis; // Paquete donde estar√° nuestro scanner
import java_cup.runtime.Symbol; 
import java.util.ArrayList;
import Motor.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.l</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    12, 12, 12, 12, 12, 12, 12, 12, 12, 14,  7, 62, 14,  2, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    14, 16,  6, 47, 46, 12, 48, 11, 58, 59,  3, 60, 55, 61,  5,  1, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 12, 57, 15, 54, 18, 56, 
    12, 26, 28, 19, 37, 29, 34, 41, 42, 25, 13, 45, 33, 22, 36, 21, 
    23, 13, 30, 39, 31, 32, 13, 13, 40, 13, 13, 50, 43, 51, 12, 10, 
    12, 27, 28, 20, 37, 29, 35, 41, 17, 25, 13, 45, 33, 22, 36, 21, 
    23, 13, 30, 39, 31, 32, 13, 13, 40, 13, 13, 52, 49, 53, 12, 12, 
    12, 12, 12, 12, 12, 62, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12,  9, 12, 12, 12, 12, 12, 12, 12,  9, 12, 12, 12,  9, 12, 12, 
    12,  9, 12,  9, 12, 12, 12, 12, 12, 12,  9, 12, 12, 12, 12, 12
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\10\1\11\1\7\1\12\2\7\1\1"+
    "\7\7\1\1\2\7\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\0\1\33\1\0\1\34"+
    "\2\0\1\35\1\36\2\37\1\40\6\7\1\0\1\41"+
    "\1\0\1\42\1\7\1\41\1\7\1\42\5\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\2\0\3\7\1\43"+
    "\1\0\1\44\1\45\1\46\1\47\2\0\1\50\1\0"+
    "\5\7\1\0\3\7\2\0\2\7\1\0\6\7\1\0"+
    "\1\7\1\0\2\7\1\0\4\7\1\0\1\7\2\0"+
    "\3\7\3\0\5\7\1\0\2\7\1\51\2\0\2\7"+
    "\1\0\1\7\1\52\3\7\1\53\2\54\1\0\2\7"+
    "\1\0\4\7\2\55\6\0\12\7\1\47\1\56\2\57"+
    "\4\7\1\0\2\7\2\0\2\7\1\0\1\7\1\60"+
    "\1\61\1\62\1\0\2\7\1\0\1\7\1\63\1\64"+
    "\1\65\1\66\6\0\1\66\16\7\1\0\3\7\1\67"+
    "\1\0\2\7\1\70\1\0\1\70\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\71\1\72\1\73\7\0"+
    "\11\7\1\0\4\7\1\74\2\7\1\0\4\7\1\0"+
    "\1\7\1\75\1\0\1\7\1\0\1\7\2\76\2\77"+
    "\1\0\1\100\1\0\1\101\3\0\1\7\1\100\1\7"+
    "\1\101\4\7\1\102\1\0\1\7\1\103\2\7\1\104"+
    "\1\105\1\7\1\0\4\7\1\0\1\7\2\106\1\0"+
    "\1\7\2\0\1\107\1\110\1\111\2\7\1\107\1\110"+
    "\1\111\1\7\1\0\1\7\1\112\1\113\1\7\1\0"+
    "\4\7\1\0\1\7\1\0\1\7\2\0\3\7\1\0"+
    "\2\7\1\0\1\7\1\114\1\115\1\7\2\116\2\117"+
    "\2\0\2\7\1\0\1\7\1\0\2\7\2\120\1\121"+
    "\1\122\2\0\2\7\1\0\1\7\1\0\1\7\1\123"+
    "\1\124\1\0\1\124\1\7\2\125\1\0\1\7\2\126"+
    "\2\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\100\0\300\0\100\0\u0100"+
    "\0\u0140\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\100\0\100\0\u0640\0\u0680"+
    "\0\100\0\100\0\100\0\100\0\u06c0\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u0700\0\u0740\0\u0780\0\u0100"+
    "\0\100\0\u07c0\0\u0800\0\100\0\100\0\100\0\u0140\0\100"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\100"+
    "\0\u0a00\0\100\0\u0a40\0\u0140\0\u0a80\0\u0140\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0600\0\u0600\0\100\0\100\0\100\0\u0700"+
    "\0\u0fc0\0\u1000\0\100\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u0140\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u0140\0\u1e00\0\u1e40\0\u1e80\0\u0140"+
    "\0\100\0\u0140\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u2040\0\u2080\0\100\0\u0140\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\100\0\100\0\100\0\u0140"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u0140\0\u0140\0\u0140"+
    "\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u0140\0\u2940\0\u0140"+
    "\0\100\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u0140"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0"+
    "\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u2f40\0\u0140\0\u2f80\0\u2fc0\0\u3000\0\100\0\u3040"+
    "\0\u0140\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200"+
    "\0\100\0\u0140\0\u0140\0\u0140\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900"+
    "\0\u3940\0\u3980\0\u39c0\0\u0140\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\100\0\u0140\0\100\0\u0140\0\u3b00\0\100\0\u3b40\0\100"+
    "\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u0140\0\u3c80\0\u0140\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u0140\0\u3dc0\0\u3e00\0\u0140\0\u3e40"+
    "\0\u3e80\0\u0140\0\u0140\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0"+
    "\0\u4000\0\u4040\0\u4080\0\100\0\u0140\0\u40c0\0\u4100\0\u4140"+
    "\0\u4180\0\100\0\100\0\100\0\u41c0\0\u4200\0\u0140\0\u0140"+
    "\0\u0140\0\u4240\0\u4280\0\u42c0\0\u0140\0\u0140\0\u4300\0\u4340"+
    "\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540"+
    "\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740"+
    "\0\u4780\0\u47c0\0\u0140\0\u0140\0\u4800\0\100\0\u0140\0\100"+
    "\0\u0140\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0"+
    "\0\u4a00\0\u4a40\0\100\0\u0140\0\u0140\0\u0140\0\u4a80\0\u4ac0"+
    "\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u0140\0\100"+
    "\0\u4c80\0\u0140\0\u4cc0\0\100\0\u0140\0\u4d00\0\u4d40\0\100"+
    "\0\u0140\0\100\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\2\11\1\2\1\12\1\2\1\11\1\4\1\13\1\14"+
    "\1\15\1\16\2\17\2\11\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\2\11\2\30\2\11\1\31"+
    "\1\32\1\11\1\33\1\15\1\34\1\2\1\11\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\103\0"+
    "\1\55\1\0\1\56\100\0\1\6\1\57\72\0\6\60"+
    "\2\61\70\60\4\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\23\0\7\62\1\0\17\62"+
    "\1\0\15\62\1\0\5\62\1\0\22\62\21\0\1\63"+
    "\45\0\1\64\77\0\1\65\15\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\15\11\1\66\1\67\3\11\2\0\1\11\110\0"+
    "\1\70\15\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\2\11\1\71\2\11\1\0"+
    "\1\11\2\72\2\11\1\73\1\11\1\74\1\75\4\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\1\11\2\76\12\11\1\0\4\11\2\0\1\11"+
    "\50\0\1\77\13\0\2\100\1\101\1\102\36\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\3\11\1\103\1\11\1\0\11\11\2\104\1\105"+
    "\1\106\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\10\11\1\107\2\11\1\110\1\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\11\1\111"+
    "\2\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\112\3\11\1\0\10\11\1\113\4\11"+
    "\1\114\1\115\3\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\4\11\1\116\10\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\117\1\120\2\121"+
    "\1\11\1\122\10\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\11\1\123\2\11\1\124\1\125\14\11"+
    "\1\0\4\11\2\0\1\11\54\0\2\126\1\0\1\127"+
    "\46\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\1\11\2\130\1\11"+
    "\1\131\10\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\4\11\1\132\10\11\1\0\4\11"+
    "\2\0\1\11\22\0\1\133\1\134\51\133\1\134\24\133"+
    "\60\0\1\135\100\0\1\136\104\0\1\137\11\0\2\140"+
    "\1\0\4\140\1\0\70\140\1\141\1\142\76\141\4\0"+
    "\1\57\106\0\1\143\64\0\21\144\1\0\2\144\1\0"+
    "\6\144\1\0\7\144\1\0\34\144\4\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\3\11\1\145\1\11\1\0\10\11\1\146\4\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\147\11\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\150\10\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\4\11\1\151\10\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\152\1\153\14\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\5\11"+
    "\1\154\1\155\6\11\1\0\4\11\2\0\1\11\54\0"+
    "\2\156\112\0\2\157\34\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\1\11\2\160\12\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\15\11\1\157\1\161\3\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\162\1\163"+
    "\5\11\1\164\6\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\165\3\11\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\5\11"+
    "\1\166\1\167\6\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\170\1\0\5\11\1\0\15\11\1\0\3\11\1\170"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\15\11"+
    "\1\171\1\172\3\11\2\0\1\11\51\0\1\173\54\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\4\11\1\174\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\4\11\1\175\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\61\0\1\176\44\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\6\11\1\177\6\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\200\11\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\15\11\1\0\1\11\1\201"+
    "\2\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\13\11\1\202\1\11\1\0\4\11\2\0\1\11\63\0"+
    "\1\203\42\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\10\11\1\204"+
    "\4\11\1\0\4\11\2\0\1\11\63\0\1\205\75\0"+
    "\1\206\44\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\10\11\1\207"+
    "\4\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\6\11\1\210\6\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\6\11\1\211"+
    "\6\11\1\0\4\11\2\0\1\11\22\0\3\141\1\212"+
    "\74\141\1\0\1\142\1\0\1\213\74\0\20\144\1\214"+
    "\57\144\4\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\4\11\1\215\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\7\11\1\216\5\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\4\11\1\217\10\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\1\11\2\220\12\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\5\11\1\221\7\11"+
    "\1\0\4\11\2\0\1\11\45\0\2\222\57\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\2\223\3\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\5\11\1\224"+
    "\7\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\225\1\0"+
    "\5\11\1\0\15\11\1\0\3\11\1\225\2\0\1\11"+
    "\73\0\1\226\63\0\1\227\46\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\15\11\1\0\2\11\1\230\1\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\4\11\1\231\10\11"+
    "\1\0\4\11\2\0\1\11\66\0\1\232\37\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\13\11\1\233\1\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\11\1\234\2\11"+
    "\1\0\15\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\235"+
    "\1\0\5\11\1\0\15\11\1\0\3\11\1\235\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\14\11\1\236"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\11"+
    "\1\237\2\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\240\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\57\0\1\241\46\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\4\11\1\242\10\11\1\0\4\11"+
    "\2\0\1\11\54\0\2\243\50\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\1\11\2\244\12\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\4\11\1\245\10\11"+
    "\1\0\4\11\2\0\1\11\62\0\1\246\43\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\7\11\1\247\5\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\10\11"+
    "\1\250\4\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\6\11\1\251\6\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\14\11"+
    "\1\252\1\0\4\11\2\0\1\11\54\0\2\253\50\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\1\11\2\254\12\11\1\0"+
    "\4\11\2\0\1\11\61\0\1\255\63\0\2\256\2\0"+
    "\1\257\2\0\2\260\1\261\2\0\1\262\44\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\6\11\1\263\6\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\264\2\11\1\265"+
    "\1\0\1\11\2\266\1\267\2\11\1\270\6\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\271\2\11"+
    "\1\272\1\0\1\11\2\273\3\11\1\274\6\11\1\0"+
    "\4\11\2\0\1\11\22\0\1\141\1\275\1\141\1\212"+
    "\74\141\1\0\1\275\76\0\20\144\1\214\1\144\1\276"+
    "\55\144\4\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\277\1\300\14\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\3\11"+
    "\1\301\1\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\302\3\11\1\0\15\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\303\7\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\4\11\1\304\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\76\0\2\305\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\15\11\1\0\4\11\1\0\1\305\1\306\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\1\11\2\307\12\11\1\0"+
    "\4\11\2\0\1\11\57\0\1\310\100\0\1\311\45\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\312\10\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\313\7\11\1\0\4\11\2\0\1\11\57\0"+
    "\1\314\46\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\4\11\1\315"+
    "\10\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\316\2\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\4\11\1\317"+
    "\10\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\13\11\1\320\1\11\1\0\4\11\2\0"+
    "\1\11\45\0\2\321\57\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\322\3\11"+
    "\1\0\15\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\6\11\1\323\6\11\1\0\4\11"+
    "\2\0\1\11\63\0\1\324\42\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\10\11\1\325\4\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\1\11\2\326\12\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\11"+
    "\1\327\2\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\330\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\47\0\1\331\77\0\1\332"+
    "\104\0\2\333\105\0\1\334\2\0\1\335\60\0\1\336"+
    "\107\0\1\337\46\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\11\1\340\2\11"+
    "\1\0\15\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\2\11\1\341\2\11\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\1\11"+
    "\2\342\12\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\10\11\1\343\2\11\1\344\1\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\11"+
    "\1\345\2\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\4\11\1\346\10\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\11"+
    "\1\347\2\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\1\11\2\350\12\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\10\11\1\351\2\11\1\352\1\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\4\11"+
    "\1\353\10\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\13\11\1\354\1\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\4\11"+
    "\1\355\10\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\4\11\1\356\1\357\1\360\2\11\1\361\2\11"+
    "\1\362\6\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\2\11\1\363\2\11\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\56\0\1\364\47\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\3\11\1\365\11\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\11\11\2\366\2\11"+
    "\1\0\4\11\2\0\1\11\66\0\1\367\72\0\1\370"+
    "\44\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\13\11\1\371\1\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\6\11\1\372\6\11\1\0\4\11\2\0\1\11"+
    "\54\0\2\373\50\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\1\11"+
    "\2\374\12\11\1\0\4\11\2\0\1\11\52\0\2\375"+
    "\52\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\375\1\376\14\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\377"+
    "\1\u0100\14\11\1\0\4\11\2\0\1\11\47\0\1\u0101"+
    "\56\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\u0102\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\1\11\2\u0103\1\u0104\11\11\1\0\4\11\2\0"+
    "\1\11\66\0\1\u0105\72\0\1\u0106\70\0\2\u0107\5\0"+
    "\1\u0108\63\0\2\u0109\111\0\1\u010a\111\0\1\u010b\33\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\13\11\1\u010c\1\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\6\11\1\u010d\6\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\u0107\1\u010e\5\11\1\u010f\6\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\u0110"+
    "\3\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u0111\7\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\15\11\1\0\1\11\1\u0112\2\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\13\11\1\u0113\1\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\6\11\1\u0114\6\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\u0115\1\u0116\5\11\1\u0117\6\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\u0118"+
    "\3\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\15\11\1\0\1\11\1\u0119"+
    "\2\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\1\11\2\u011a\12\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u011b\7\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\1\11\2\u011c\12\11\1\0\4\11\2\0\1\11\50\0"+
    "\1\u011d\55\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\3\11\1\u011e\1\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\u011f\2\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\1\11\2\u0120"+
    "\1\11\1\u0121\10\11\1\0\4\11\2\0\1\11\47\0"+
    "\1\u0122\56\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\2\11\1\u0123\2\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\u0124\2\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\54\0\2\u0125\50\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\1\11\2\u0126\12\11\1\0\4\11\2\0\1\11\45\0"+
    "\2\u0127\57\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\2\u0128\3\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\47\0\1\u0129\56\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\2\11\1\u012a\2\11\1\0\15\11\1\0\4\11"+
    "\2\0\1\11\60\0\1\u012b\45\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\5\11\1\u012c\7\11\1\0\4\11\2\0\1\11"+
    "\61\0\1\u012d\61\0\1\u012e\30\0\1\u012e\71\0\1\u012f"+
    "\60\0\1\u0130\73\0\1\u0131\30\0\1\u0131\72\0\1\u0132"+
    "\71\0\1\u0133\44\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\6\11"+
    "\1\u0134\6\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\u0135"+
    "\1\0\5\11\1\0\15\11\1\0\3\11\1\u0135\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\13\11\1\u0136"+
    "\1\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\u0137\2\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\u0138\1\0\5\11\1\0\15\11\1\0"+
    "\3\11\1\u0138\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\14\11\1\u0139\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\6\11\1\u013a\6\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\6\11\1\u013b\6\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\u013c\1\0\5\11\1\0\15\11\1\0\3\11\1\u013c"+
    "\2\0\1\11\66\0\1\u013d\37\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\13\11\1\u013e\1\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\u013f\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\u0140\1\0\5\11"+
    "\1\0\15\11\1\0\3\11\1\u0140\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\6\11\1\u0141\6\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\u0142\3\11"+
    "\1\0\15\11\1\0\4\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\1\11\2\u0143\12\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\5\11"+
    "\1\u0144\7\11\1\0\4\11\2\0\1\11\54\0\2\u0145"+
    "\50\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\1\11\2\u0146\12\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\6\11\1\u0147\6\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\3\11\1\u0148\11\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\15\11\1\0\1\11\1\u0149\2\11\2\0\1\11"+
    "\61\0\1\u014a\44\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\5\11\1\0\6\11"+
    "\1\u014b\6\11\1\0\4\11\2\0\1\11\60\0\1\u014c"+
    "\45\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\5\11\1\u014d\7\11"+
    "\1\0\4\11\2\0\1\11\52\0\2\u014e\52\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\u014e\1\u014f\14\11\1\0\4\11\2\0"+
    "\1\11\57\0\1\u0150\77\0\1\u0151\67\0\1\u0152\107\0"+
    "\1\u0153\67\0\1\u0154\56\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\4\11\1\u0155\10\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\u0156\10\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\11\1\u0157"+
    "\2\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\u0158\10\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\11\1\u0159"+
    "\2\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\u015a\10\11\1\0"+
    "\4\11\2\0\1\11\57\0\1\u015b\46\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\4\11\1\u015c\10\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\2\11\1\u015d\2\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\u015e\2\11\1\0\15\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\5\11\1\u015f"+
    "\7\11\1\0\4\11\2\0\1\11\73\0\1\u0160\32\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\15\11\1\0\2\11\1\u0161"+
    "\1\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\11\1\u0162"+
    "\2\11\1\0\15\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\10\11\1\u0163\4\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\6\11\1\u0164\6\11\1\0\4\11\2\0\1\11\47\0"+
    "\1\u0165\56\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\2\11\1\u0166\2\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\47\0\1\u0167\56\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\11\1\u0168\2\11\1\0\15\11\1\0"+
    "\4\11\2\0\1\11\66\0\1\u0169\65\0\2\u016a\50\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\13\11\1\u016b\1\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\1\11\2\u016c\12\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\13\11\1\u016d\1\11\1\0"+
    "\4\11\2\0\1\11\54\0\2\u016e\50\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\1\11\2\u016f\12\11\1\0\4\11\2\0"+
    "\1\11\26\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\1\11\2\u0170"+
    "\12\11\1\0\4\11\2\0\1\11\57\0\1\u0171\46\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\u0172\10\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\13\11\1\u0173\1\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\1\11\2\u0174\12\11\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\11\1\u0175"+
    "\2\11\1\0\15\11\1\0\4\11\2\0\1\11\66\0"+
    "\1\u0176\37\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\1\0\5\11\1\0\13\11\1\u0177"+
    "\1\11\1\0\4\11\2\0\1\11\66\0\1\u0178\37\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\13\11\1\u0179\1\11\1\0"+
    "\4\11\2\0\1\11\52\0\2\u017a\71\0\2\u017b\57\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\u017a\1\u017c\14\11\1\0\4\11"+
    "\2\0\1\11\26\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\u017d\3\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\u017e\1\u017f\14\11\1\0\4\11\2\0\1\11"+
    "\45\0\2\u0180\57\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\u0181\3\11\1\0"+
    "\15\11\1\0\4\11\2\0\1\11\26\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\0\11\11\2\u0182\2\11\1\0\4\11\2\0"+
    "\1\11\66\0\1\u0183\37\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\0"+
    "\13\11\1\u0184\1\11\1\0\4\11\2\0\1\11\26\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\5\11\1\0\1\11\2\u0185\1\u0186\11\11"+
    "\1\0\4\11\2\0\1\11\67\0\1\u0187\62\0\2\u0188"+
    "\52\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\14\11\1\u0189\1\0"+
    "\4\11\2\0\1\11\26\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\5\11\1\u0188"+
    "\1\u018a\14\11\1\0\4\11\2\0\1\11\67\0\1\u018b"+
    "\36\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\5\11\1\0\14\11\1\u018c\1\0"+
    "\4\11\2\0\1\11\52\0\2\u018d\52\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\5\11\1\u018d\1\u018e\14\11\1\0\4\11\2\0\1\11"+
    "\26\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\u018f\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\47\0\1\u0190\77\0\1\u0191"+
    "\56\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\u0192\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\26\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\2\11"+
    "\1\u0193\2\11\1\0\15\11\1\0\4\11\2\0\1\11"+
    "\47\0\1\u0194\56\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\2\11\1\u0195\2\11"+
    "\1\0\15\11\1\0\4\11\2\0\1\11\47\0\1\u0196"+
    "\56\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\1\0\2\11\1\u0197\2\11\1\0\15\11"+
    "\1\0\4\11\2\0\1\11\66\0\1\u0198\37\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\5\11\1\0\13\11\1\u0199\1\11\1\0\4\11"+
    "\2\0\1\11\66\0\1\u019a\37\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\5\11"+
    "\1\0\13\11\1\u019b\1\11\1\0\4\11\2\0\1\11"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\1\11\25\1\2\11"+
    "\2\1\4\11\1\1\7\11\2\0\1\1\1\0\1\11"+
    "\2\0\3\11\1\1\1\11\6\1\1\0\1\11\1\0"+
    "\1\11\11\1\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\2\0\4\1\1\0\3\11\1\1\2\0\1\11\1\0"+
    "\5\1\1\0\3\1\2\0\2\1\1\0\6\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\1\1\2\0"+
    "\3\1\3\0\5\1\1\0\3\1\2\0\2\1\1\0"+
    "\6\1\1\11\1\1\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\6\0\12\1\3\11\5\1\1\0\2\1\2\0"+
    "\2\1\1\0\4\1\1\0\2\1\1\0\4\1\1\11"+
    "\6\0\17\1\1\0\4\1\1\0\2\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\3\1\7\0\11\1\1\0\7\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\3\0\11\1\1\0"+
    "\7\1\1\0\4\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\2\0\3\11\6\1\1\0\4\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\2\0\3\1\1\0\2\1"+
    "\1\0\4\1\1\11\1\1\1\11\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public  ArrayList<Token> ErrorT = new ArrayList<Token> ();
public  ArrayList<Token> BuenoT = new ArrayList<Token> ();


    /*Area de declaraci√≥n de codigo java. 
    *Funciones y variables necesarias
    *
    */
    String nombre;
    public void imprimir(String cadena)
    {
    	System.out.println(cadena);
    }

     private  boolean TipoRGB(String Ingreso){
         Ingreso=Ingreso.toLowerCase();
         if(Ingreso.length()!=7 ){
            return false;
        }
        for(int i=1;i<(Ingreso.length()-1);i++){
            char[] Vect=Ingreso.toCharArray();
            switch(Vect[i]){
                case 'a':  break;
                case 'b':  break;
                case 'c':  break;
                case 'd':  break;
                case 'e':  break;
                case 'f':  break;
                case '#':  break;
                case (char)34:  break;
                default: 
                    if(Character.isDigit(Vect[i])){}else{
                    return false;
                    }
            }
        }
        return true;
    }

    int  TipoCadena(String Ingreso){
        Ingreso=Ingreso.substring(1,Ingreso.length()-1).toLowerCase();

        switch(Ingreso){
            case "izquierda":
                return sym.izquierda;
            case "derecha":
                return sym.derecha;
            case "centrado":
                return sym.centrado;
            case "justificado":
                return sym.justificado;                
            case "rojo":
                return sym.color;
            case "azul":
                return sym.color;
            case "verde":
                return sym.color;
            case "negro":
                return sym.color;
            case "amarillo":
                return sym.color;
            case "rosado":
                return sym.color;
            default:
                if(TipoRGB(Ingreso)){
                    return sym.rgb;
                }else{
                return sym.cadena;
                }
        }
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Token N= new Token(yytext(),yycolumn+1,yyline+1);
    ErrorT.add(N);


     //   System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));
            } 
            // fall through
          case 88: break;
          case 2: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.div,yycolumn,yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 3: 
            { /*Ignorar*/
            } 
            // fall through
          case 90: break;
          case 4: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.multi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 5: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.entero,yycolumn,yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 6: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.punto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 7: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); if(yytext().equals("true")||yytext().equals("false")){return new Symbol(sym.booleano,yycolumn,yyline,yytext());} return new Symbol(sym.id,yycolumn,yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 8: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.men,yycolumn,yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 9: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.admira,yycolumn,yyline,yytext());
            } 
            // fall through
          case 96: break;
          case 10: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.may,yycolumn,yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 11: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.dolar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 12: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.numeral,yycolumn,yyline,yytext());
            } 
            // fall through
          case 99: break;
          case 13: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.and,yycolumn,yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 14: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.or,yycolumn,yyline,yytext());
            } 
            // fall through
          case 101: break;
          case 15: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.cora,yycolumn,yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 16: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.corc,yycolumn,yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 17: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.llaa,yycolumn,yyline,yytext());
            } 
            // fall through
          case 104: break;
          case 18: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.llac,yycolumn,yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 19: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.igual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 106: break;
          case 20: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.coma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 107: break;
          case 21: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.interro,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 22: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.puntocoma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 23: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.para,yycolumn,yyline,yytext());
            } 
            // fall through
          case 110: break;
          case 24: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.parc,yycolumn,yyline,yytext());
            } 
            // fall through
          case 111: break;
          case 25: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.suma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 112: break;
          case 26: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.resta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 113: break;
          case 27: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 28: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N);   return new Symbol(TipoCadena(yytext()),yycolumn,yyline,yytext().substring(1,yytext().length()-1).toLowerCase());
            } 
            // fall through
          case 115: break;
          case 29: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.menorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 30: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.diferente,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 31: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.hs,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 32: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.mayorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 119: break;
          case 33: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.ifv,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 34: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.idboton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 35: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.imgdir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 36: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.anddoble,yycolumn,yyline,yytext());
            } 
            // fall through
          case 123: break;
          case 37: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.ordoble,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 38: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.igualdoble,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 39: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N);  /*Se ignora.*/
            } 
            // fall through
          case 126: break;
          case 40: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 41: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.path,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 42: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.alto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 129: break;
          case 43: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.echo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 44: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.elses,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 45: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.fila,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 46: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N);
            } 
            // fall through
          case 133: break;
          case 47: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.compi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 134: break;
          case 48: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.ancho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 135: break;
          case 49: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.borde,yycolumn,yyline,yytext());
            } 
            // fall through
          case 136: break;
          case 50: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.boton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 137: break;
          case 51: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.tabla,yycolumn,yyline,yytext());
            } 
            // fall through
          case 138: break;
          case 52: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.textoboton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 139: break;
          case 53: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.fondo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 140: break;
          case 54: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.salto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 141: break;
          case 55: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.cuerpo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 142: break;
          case 56: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.imagen,yycolumn,yyline,yytext());
            } 
            // fall through
          case 143: break;
          case 57: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.titulo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 144: break;
          case 58: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.textoa,yycolumn,yyline,yytext());
            } 
            // fall through
          case 145: break;
          case 59: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.textob,yycolumn,yyline,yytext());
            } 
            // fall through
          case 146: break;
          case 60: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.columna,yycolumn,yyline,yytext());
            } 
            // fall through
          case 147: break;
          case 61: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.parrafo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 148: break;
          case 62: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.espacio,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 63: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.repetir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 150: break;
          case 64: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setpath,yycolumn,yyline,yytext());
            } 
            // fall through
          case 151: break;
          case 65: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setalto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 152: break;
          case 66: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.getpath,yycolumn,yyline,yytext());
            } 
            // fall through
          case 153: break;
          case 67: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.getalto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 154: break;
          case 68: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.columnac,yycolumn,yyline,yytext());
            } 
            // fall through
          case 155: break;
          case 69: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.cabecera,yycolumn,yyline,yytext());
            } 
            // fall through
          case 156: break;
          case 70: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.insertar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 71: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setancho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 72: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setborder,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 73: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.settexto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 160: break;
          case 74: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.getancho ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 161: break;
          case 75: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.gettexto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 162: break;
          case 76: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.crearboton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 163: break;
          case 77: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.creartabla,yycolumn,yyline,yytext());
            } 
            // fall through
          case 164: break;
          case 78: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.clickboton ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 165: break;
          case 79: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.alineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 166: break;
          case 80: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.crearimagen,yycolumn,yyline,yytext());
            } 
            // fall through
          case 167: break;
          case 81: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.creartextoa,yycolumn,yyline,yytext());
            } 
            // fall through
          case 168: break;
          case 82: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.creartextob,yycolumn,yyline,yytext());
            } 
            // fall through
          case 169: break;
          case 83: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.crearparrafo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 170: break;
          case 84: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setcontenido,yycolumn,yyline,yytext());
            } 
            // fall through
          case 171: break;
          case 85: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.getcontenido,yycolumn,yyline,yytext());
            } 
            // fall through
          case 172: break;
          case 86: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.setalineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 173: break;
          case 87: 
            { Token N= new Token(yytext(),yycolumn,yyline);   BuenoT.add(N); return new Symbol(sym.getalineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
