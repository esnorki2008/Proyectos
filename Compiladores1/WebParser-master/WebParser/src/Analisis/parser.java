
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import Motor.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\002\004\000\002\071\012\000\002\071" +
    "\012\000\002\072\004\000\002\072\003\000\002\102\007" +
    "\000\002\102\005\000\002\073\005\000\002\073\003\000" +
    "\002\074\014\000\002\074\012\000\002\074\014\000\002" +
    "\074\012\000\002\063\011\000\002\104\002\000\002\063" +
    "\013\000\002\063\012\000\002\063\014\000\002\063\012" +
    "\000\002\063\014\000\002\063\012\000\002\063\012\000" +
    "\002\105\002\000\002\063\013\000\002\063\012\000\002" +
    "\063\014\000\002\063\012\000\002\063\014\000\002\063" +
    "\012\000\002\063\014\000\002\064\003\000\002\064\003" +
    "\000\002\064\004\000\002\100\003\000\002\100\010\000" +
    "\002\100\004\000\002\065\005\000\002\065\003\000\002" +
    "\101\003\000\002\101\007\000\002\101\006\000\002\101" +
    "\006\000\002\106\002\000\002\057\011\000\002\061\004" +
    "\000\002\061\004\000\002\061\004\000\002\061\004\000" +
    "\002\061\012\000\002\061\003\000\002\107\002\000\002" +
    "\110\002\000\002\053\013\000\002\054\005\000\002\054" +
    "\002\000\002\055\005\000\002\055\005\000\002\055\004" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\070\005\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\006\000" +
    "\002\070\003\000\002\070\004\000\002\070\004\000\002" +
    "\040\007\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\002\000\002\042\007\000" +
    "\002\051\003\000\002\051\003\000\002\051\004\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\006\000\002\044\003\000" +
    "\002\044\004\000\002\044\004\000\002\045\005\000\002" +
    "\047\004\000\002\050\004\000\002\050\002\000\002\046" +
    "\004\000\002\046\003\000\002\026\006\000\002\026\006" +
    "\000\002\026\007\000\002\026\007\000\002\026\005\000" +
    "\002\026\006\000\002\026\006\000\002\103\003\000\002" +
    "\103\003\000\002\027\004\000\002\027\004\000\002\036" +
    "\005\000\002\037\005\000\002\030\011\000\002\031\010" +
    "\000\002\031\010\000\002\032\014\000\002\033\013\000" +
    "\002\033\002\000\002\034\010\000\002\034\010\000\002" +
    "\034\002\000\002\052\005\000\002\052\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\075\005\000\002\075\003\000" +
    "\002\075\003\000\002\025\004\000\002\014\006\000\002" +
    "\015\003\000\002\015\004\000\002\016\011\000\002\017" +
    "\003\000\002\017\005\000\002\020\006\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\011\000\002\023\011\000\002" +
    "\024\011\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\003\007\000\002\002" +
    "\013\000\002\004\021\000\002\005\010\000\002\006\005" +
    "\000\002\006\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\006\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\002\000\002\011\006\000\002\011\003\000" +
    "\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\004\024\005\001\002\000\004\002\u01fd\001" +
    "\002\000\004\031\006\001\002\000\004\023\007\001\002" +
    "\000\004\024\010\001\002\000\004\032\u01ef\001\002\000" +
    "\004\024\012\001\002\000\004\034\020\001\002\000\004" +
    "\024\014\001\002\000\004\016\015\001\002\000\004\031" +
    "\016\001\002\000\004\023\017\001\002\000\004\002\uff56" +
    "\001\002\000\006\023\023\035\021\001\002\000\004\036" +
    "\u01ea\001\002\000\004\024\024\001\002\000\004\024\uff43" +
    "\001\002\000\030\016\043\022\037\024\uff45\026\033\041" +
    "\034\042\051\050\036\051\035\052\044\057\045\062\050" +
    "\001\002\000\004\024\uff47\001\002\000\004\024\u01e8\001" +
    "\002\000\004\024\uff4c\001\002\000\004\024\uff4b\001\002" +
    "\000\004\024\uff49\001\002\000\004\024\uff4a\001\002\000" +
    "\004\023\u01e7\001\002\000\004\023\u01e1\001\002\000\004" +
    "\023\u01db\001\002\000\004\023\u01d5\001\002\000\004\070" +
    "\273\001\002\000\004\023\272\001\002\000\004\024\uff46" +
    "\001\002\000\004\024\uff4d\001\002\000\010\026\266\034" +
    "\264\041\265\001\002\000\010\053\225\055\217\056\224" +
    "\001\002\000\006\060\175\061\177\001\002\000\004\024" +
    "\uff48\001\002\000\004\024\uff4e\001\002\000\004\063\113" +
    "\001\002\000\006\023\054\027\052\001\002\000\004\036" +
    "\104\001\002\000\022\004\065\005\061\006\060\010\055" +
    "\024\066\025\063\073\062\112\056\001\002\000\022\004" +
    "\uff6d\005\uff6d\006\uff6d\010\uff6d\024\uff6d\025\uff6d\073\uff6d" +
    "\112\uff6d\001\002\000\046\004\065\005\061\006\060\010" +
    "\055\016\uff5d\022\uff5d\024\uff5d\025\063\026\uff5d\041\uff5d" +
    "\042\uff5d\050\uff5d\051\uff5d\052\uff5d\057\uff5d\062\uff5d\073" +
    "\062\112\056\001\002\000\046\004\065\005\061\006\060" +
    "\010\055\016\uff5a\022\uff5a\024\uff5a\025\063\026\uff5a\041" +
    "\uff5a\042\uff5a\050\uff5a\051\uff5a\052\uff5a\057\uff5a\062\uff5a" +
    "\073\062\112\056\001\002\000\004\024\076\001\002\000" +
    "\046\004\065\005\061\006\060\010\055\016\uff5e\022\uff5e" +
    "\024\uff5e\025\063\026\uff5e\041\uff5e\042\uff5e\050\uff5e\051" +
    "\uff5e\052\uff5e\057\uff5e\062\uff5e\073\062\112\056\001\002" +
    "\000\046\004\065\005\061\006\060\010\055\016\uff5b\022" +
    "\uff5b\024\uff5b\025\063\026\uff5b\041\uff5b\042\uff5b\050\uff5b" +
    "\051\uff5b\052\uff5b\057\uff5b\062\uff5b\073\062\112\056\001" +
    "\002\000\046\004\065\005\061\006\060\010\055\016\uff59" +
    "\022\uff59\024\uff59\025\063\026\uff59\041\uff59\042\uff59\050" +
    "\uff59\051\uff59\052\uff59\057\uff59\062\uff59\073\062\112\056" +
    "\001\002\000\046\004\065\005\061\006\060\010\055\016" +
    "\uff58\022\uff58\024\uff58\025\063\026\uff58\041\uff58\042\uff58" +
    "\050\uff58\051\uff58\052\uff58\057\uff58\062\uff58\073\062\112" +
    "\056\001\002\000\004\024\uff70\001\002\000\046\004\065" +
    "\005\061\006\060\010\055\016\uff5c\022\uff5c\024\uff5c\025" +
    "\063\026\uff5c\041\uff5c\042\uff5c\050\uff5c\051\uff5c\052\uff5c" +
    "\057\uff5c\062\uff5c\073\062\112\056\001\002\000\004\016" +
    "\067\001\002\000\004\026\033\001\002\000\004\024\uff6f" +
    "\001\002\000\030\016\uff64\022\uff64\024\uff64\026\uff64\041" +
    "\uff64\042\uff64\050\uff64\051\uff64\052\uff64\057\uff64\062\uff64" +
    "\001\002\000\030\016\uff5f\022\uff5f\024\uff5f\026\uff5f\041" +
    "\uff5f\042\uff5f\050\uff5f\051\uff5f\052\uff5f\057\uff5f\062\uff5f" +
    "\001\002\000\030\016\uff60\022\uff60\024\uff60\026\uff60\041" +
    "\uff60\042\uff60\050\uff60\051\uff60\052\uff60\057\uff60\062\uff60" +
    "\001\002\000\030\016\uff63\022\uff63\024\uff63\026\uff63\041" +
    "\uff63\042\uff63\050\uff63\051\uff63\052\uff63\057\uff63\062\uff63" +
    "\001\002\000\030\016\uff61\022\uff61\024\uff61\026\uff61\041" +
    "\uff61\042\uff61\050\uff61\051\uff61\052\uff61\057\uff61\062\uff61" +
    "\001\002\000\004\016\077\001\002\000\004\042\100\001" +
    "\002\000\004\023\101\001\002\000\022\004\uff71\005\uff71" +
    "\006\uff71\010\uff71\024\uff71\025\uff71\073\uff71\112\uff71\001" +
    "\002\000\030\016\uff62\022\uff62\024\uff62\026\uff62\041\uff62" +
    "\042\uff62\050\uff62\051\uff62\052\uff62\057\uff62\062\uff62\001" +
    "\002\000\030\016\uff65\022\uff65\024\uff65\026\uff65\041\uff65" +
    "\042\uff65\050\uff65\051\uff65\052\uff65\057\uff65\062\uff65\001" +
    "\002\000\012\043\106\044\105\045\111\046\107\001\002" +
    "\000\006\020\uff6b\023\uff6b\001\002\000\006\020\uff6c\023" +
    "\uff6c\001\002\000\006\020\uff69\023\uff69\001\002\000\004" +
    "\023\112\001\002\000\006\020\uff6a\023\uff6a\001\002\000" +
    "\022\004\uff6e\005\uff6e\006\uff6e\010\uff6e\024\uff6e\025\uff6e" +
    "\073\uff6e\112\uff6e\001\002\000\004\036\114\001\002\000" +
    "\004\007\115\001\002\000\004\023\116\001\002\000\004" +
    "\024\117\001\002\000\006\016\uff83\065\120\001\002\000" +
    "\004\023\125\001\002\000\004\016\122\001\002\000\004" +
    "\062\123\001\002\000\004\023\124\001\002\000\004\024" +
    "\uff85\001\002\000\004\024\126\001\002\000\010\016\uff80" +
    "\066\131\067\127\001\002\000\004\023\170\001\002\000" +
    "\004\016\163\001\002\000\004\023\132\001\002\000\022" +
    "\004\065\005\061\006\060\010\055\024\135\025\063\073" +
    "\062\112\056\001\002\000\004\023\160\001\002\000\004" +
    "\024\156\001\002\000\014\016\136\022\037\042\051\052" +
    "\044\057\045\001\002\000\010\026\153\066\151\067\150" +
    "\001\002\000\022\004\065\005\061\006\060\010\055\024" +
    "\135\025\063\073\062\112\056\001\002\000\022\004\065" +
    "\005\061\006\060\010\055\024\135\025\063\073\062\112" +
    "\056\001\002\000\022\004\065\005\061\006\060\010\055" +
    "\024\135\025\063\073\062\112\056\001\002\000\004\023" +
    "\uff7e\001\002\000\022\004\065\005\061\006\060\010\055" +
    "\024\135\025\063\073\062\112\056\001\002\000\004\023" +
    "\uff7a\001\002\000\004\023\uff7d\001\002\000\004\023\uff7c" +
    "\001\002\000\004\023\uff7b\001\002\000\004\023\uff76\001" +
    "\002\000\004\023\uff77\001\002\000\004\023\uff79\001\002" +
    "\000\004\023\154\001\002\000\022\004\065\005\061\006" +
    "\060\010\055\024\135\025\063\073\062\112\056\001\002" +
    "\000\004\023\uff78\001\002\000\014\016\136\022\037\042" +
    "\051\052\044\057\045\001\002\000\004\023\uff7f\001\002" +
    "\000\004\024\161\001\002\000\010\016\uff80\066\131\067" +
    "\127\001\002\000\004\016\uff82\001\002\000\004\065\164" +
    "\001\002\000\004\023\165\001\002\000\004\024\166\001" +
    "\002\000\006\016\uff83\065\120\001\002\000\004\016\uff84" +
    "\001\002\000\022\004\065\005\061\006\060\010\055\024" +
    "\135\025\063\073\062\112\056\001\002\000\004\023\172" +
    "\001\002\000\004\024\173\001\002\000\010\016\uff80\066" +
    "\131\067\127\001\002\000\004\016\uff81\001\002\000\004" +
    "\036\212\001\002\000\004\023\205\001\002\000\004\036" +
    "\200\001\002\000\004\006\201\001\002\000\004\060\202" +
    "\001\002\000\004\036\203\001\002\000\004\006\204\001" +
    "\002\000\004\023\uff86\001\002\000\004\024\206\001\002" +
    "\000\004\016\207\001\002\000\004\057\210\001\002\000" +
    "\004\023\211\001\002\000\022\004\uff88\005\uff88\006\uff88" +
    "\010\uff88\024\uff88\025\uff88\073\uff88\112\uff88\001\002\000" +
    "\004\006\213\001\002\000\004\061\214\001\002\000\004" +
    "\036\215\001\002\000\004\006\216\001\002\000\004\023" +
    "\uff87\001\002\000\004\036\261\001\002\000\006\053\255" +
    "\055\217\001\002\000\006\053\251\056\224\001\002\000" +
    "\004\053\246\001\002\000\004\023\241\001\002\000\004" +
    "\036\237\001\002\000\004\036\226\001\002\000\006\006" +
    "\227\054\231\001\002\000\010\023\uff8d\055\uff8d\056\uff8d" +
    "\001\002\000\010\023\uff91\055\217\056\224\001\002\000" +
    "\010\023\uff8e\055\uff8e\056\uff8e\001\002\000\006\023\uff8f" +
    "\055\217\001\002\000\004\023\uff95\001\002\000\006\023" +
    "\uff90\056\224\001\002\000\006\023\uff8c\053\uff8c\001\002" +
    "\000\006\023\uff8b\053\uff8b\001\002\000\004\004\240\001" +
    "\002\000\010\023\uff89\053\uff89\055\uff89\001\002\000\004" +
    "\024\242\001\002\000\004\016\243\001\002\000\004\052" +
    "\244\001\002\000\004\023\245\001\002\000\022\004\uff66" +
    "\005\uff66\006\uff66\010\uff66\024\uff66\025\uff66\073\uff66\112" +
    "\uff66\001\002\000\004\036\247\001\002\000\006\006\227" +
    "\054\231\001\002\000\004\023\uff94\001\002\000\004\036" +
    "\252\001\002\000\006\006\227\054\231\001\002\000\004" +
    "\056\224\001\002\000\004\023\uff93\001\002\000\004\036" +
    "\256\001\002\000\006\006\227\054\231\001\002\000\004" +
    "\055\217\001\002\000\004\023\uff92\001\002\000\004\004" +
    "\262\001\002\000\010\023\uff8a\053\uff8a\056\uff8a\001\002" +
    "\000\004\023\uff52\001\002\000\004\023\uff51\001\002\000" +
    "\004\023\uff50\001\002\000\004\023\267\001\002\000\004" +
    "\024\270\001\002\000\030\016\043\022\037\024\uff45\026" +
    "\033\041\034\042\051\050\036\051\035\052\044\057\045" +
    "\062\050\001\002\000\004\023\uff4f\001\002\000\004\024" +
    "\uff54\001\002\000\016\022\uffac\071\274\072\275\074\276" +
    "\111\303\112\277\001\002\000\004\010\u01b8\001\002\000" +
    "\006\006\u01b0\071\u01af\001\002\000\004\017\u017b\001\002" +
    "\000\004\010\u0108\001\002\000\016\022\uffac\071\274\072" +
    "\275\074\276\111\303\112\277\001\002\000\016\022\uffac" +
    "\071\274\072\275\074\276\111\303\112\277\001\002\000" +
    "\016\022\uffac\071\274\072\275\074\276\111\303\112\277" +
    "\001\002\000\004\017\317\001\002\000\016\022\uffac\071" +
    "\274\072\275\074\276\111\303\112\277\001\002\000\016" +
    "\022\uffac\071\274\072\275\074\276\111\303\112\277\001" +
    "\002\000\004\022\313\001\002\000\016\022\uffac\071\274" +
    "\072\275\074\276\111\303\112\277\001\002\000\016\022" +
    "\uffac\071\274\072\275\074\276\111\303\112\277\001\002" +
    "\000\004\022\uffb1\001\002\000\004\022\uffad\001\002\000" +
    "\004\023\314\001\002\000\022\004\uffb4\005\uffb4\006\uffb4" +
    "\010\uffb4\024\uffb4\025\uffb4\073\uffb4\112\uffb4\001\002\000" +
    "\004\022\uffb2\001\002\000\004\022\uffb3\001\002\000\022" +
    "\004\326\005\325\006\324\007\330\013\323\014\322\017" +
    "\332\071\321\001\002\000\024\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\102\uff9e\140\uff9e\001" +
    "\002\000\004\010\u0104\001\002\000\016\004\326\005\325" +
    "\013\323\014\322\017\332\071\321\001\002\000\016\004" +
    "\326\005\325\013\323\014\322\017\332\071\321\001\002" +
    "\000\012\012\uffa7\020\uffa7\102\uffa7\140\uffa7\001\002\000" +
    "\044\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\023\uffa9\024\uffa9\075\uffa9\076\uffa9\102\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\110\uffa9\140\uffa9\001\002\000\044" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\023\uffaa\024\uffaa\075\uffaa\076\uffaa\102\uffaa\105\uffaa" +
    "\106\uffaa\107\uffaa\110\uffaa\140\uffaa\001\002\000\004\020" +
    "\uffd7\001\002\000\012\012\uffa6\020\uffa6\102\uffa6\140\uffa6" +
    "\001\002\000\024\012\uffa5\013\336\014\334\015\337\016" +
    "\341\017\335\020\uffa5\102\uffa5\140\uffa5\001\002\000\016" +
    "\004\326\005\325\013\323\014\322\017\332\071\321\001" +
    "\002\000\016\013\336\014\334\015\337\016\341\017\335" +
    "\020\340\001\002\000\016\004\326\005\325\013\323\014" +
    "\322\017\332\071\321\001\002\000\016\004\326\005\325" +
    "\013\323\014\322\017\332\071\321\001\002\000\016\004" +
    "\326\005\325\013\323\014\322\017\332\071\321\001\002" +
    "\000\016\004\326\005\325\013\323\014\322\017\332\071" +
    "\321\001\002\000\024\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\102\uffa0\140\uffa0\001\002\000" +
    "\016\004\326\005\325\013\323\014\322\017\332\071\321" +
    "\001\002\000\024\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\102\uffa1\140\uffa1\001\002\000\024" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\102\uffa2\140\uffa2\001\002\000\024\012\uffa4\013\uffa4" +
    "\014\uffa4\015\337\016\341\017\uffa4\020\uffa4\102\uffa4\140" +
    "\uffa4\001\002\000\016\013\336\014\334\015\337\016\341" +
    "\017\335\020\346\001\002\000\024\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\102\uff9f\140\uff9f" +
    "\001\002\000\024\012\uffa3\013\uffa3\014\uffa3\015\337\016" +
    "\341\017\uffa3\020\uffa3\102\uffa3\140\uffa3\001\002\000\004" +
    "\020\351\001\002\000\004\077\352\001\002\000\016\071" +
    "\353\072\275\074\276\100\355\111\303\112\354\001\002" +
    "\000\004\010\376\001\002\000\004\010\367\001\002\000" +
    "\022\022\uffd0\071\uffd0\072\uffd0\074\uffd0\100\uffd0\111\uffd0" +
    "\112\uffd0\137\uffd0\001\002\000\016\071\353\072\275\074" +
    "\276\100\355\111\303\112\354\001\002\000\020\022\uffd6" +
    "\071\uffd6\072\uffd6\074\uffd6\100\uffd6\111\uffd6\112\uffd6\001" +
    "\002\000\016\071\353\072\275\074\276\100\355\111\303" +
    "\112\354\001\002\000\016\071\353\072\275\074\276\100" +
    "\355\111\303\112\354\001\002\000\016\071\353\072\275" +
    "\074\276\100\355\111\303\112\354\001\002\000\022\022" +
    "\uffd4\071\uffd4\072\uffd4\074\uffd4\100\uffd4\111\uffd4\112\uffd4" +
    "\137\uffd4\001\002\000\022\022\uffd5\071\uffd5\072\uffd5\074" +
    "\uffd5\100\uffd5\111\uffd5\112\uffd5\137\uffd5\001\002\000\022" +
    "\022\uffd2\071\uffd2\072\uffd2\074\uffd2\100\uffd2\111\uffd2\112" +
    "\uffd2\137\uffd2\001\002\000\022\022\uffd3\071\uffd3\072\uffd3" +
    "\074\uffd3\100\uffd3\111\uffd3\112\uffd3\137\uffd3\001\002\000" +
    "\004\073\370\001\002\000\004\113\371\001\002\000\004" +
    "\017\372\001\002\000\004\020\373\001\002\000\004\012" +
    "\374\001\002\000\016\071\353\072\275\074\276\100\355" +
    "\111\303\112\354\001\002\000\022\022\uffd1\071\uffd1\072" +
    "\uffd1\074\uffd1\100\uffd1\111\uffd1\112\uffd1\137\uffd1\001\002" +
    "\000\004\036\377\001\002\000\022\004\326\005\325\006" +
    "\324\007\330\013\323\014\322\017\332\071\321\001\002" +
    "\000\004\012\u0101\001\002\000\020\022\uffab\071\uffab\072" +
    "\uffab\074\uffab\100\uffab\111\uffab\112\uffab\001\002\000\024" +
    "\012\uff9c\013\uff9c\014\uff9c\015\337\016\341\017\uff9c\020" +
    "\uff9c\102\uff9c\140\uff9c\001\002\000\024\012\uff9d\013\uff9d" +
    "\014\uff9d\015\337\016\341\017\uff9d\020\uff9d\102\uff9d\140" +
    "\uff9d\001\002\000\044\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\023\uffa8\024\uffa8\075\uffa8\076" +
    "\uffa8\102\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\140\uffa8" +
    "\001\002\000\004\022\uffae\001\002\000\004\022\uffaf\001" +
    "\002\000\004\022\uffb0\001\002\000\006\036\u010a\073\u0109" +
    "\001\002\000\024\113\u014f\115\u0152\117\u0154\124\u0150\126" +
    "\u014d\130\u014c\132\u0153\134\u014e\136\u0151\001\002\000\016" +
    "\114\u010d\121\u010c\122\u010b\123\u0110\133\u010f\143\u010e\001" +
    "\002\000\004\017\u0148\001\002\000\004\017\u0144\001\002" +
    "\000\004\017\ufff3\001\002\000\004\017\u0130\001\002\000" +
    "\004\017\u0121\001\002\000\004\017\uffeb\001\002\000\004" +
    "\017\u0112\001\002\000\010\006\u0114\054\u0117\071\u0115\001" +
    "\002\000\006\020\uffdb\140\u011b\001\002\000\006\020\uffe2" +
    "\140\uffe2\001\002\000\004\010\u011a\001\002\000\004\020" +
    "\u0118\001\002\000\006\020\uffe3\140\uffe3\001\002\000\004" +
    "\012\u0119\001\002\000\016\022\uffea\071\uffea\072\uffea\074" +
    "\uffea\111\uffea\112\uffea\001\002\000\006\020\uffe1\140\uffe1" +
    "\001\002\000\020\004\326\005\325\013\323\014\322\017" +
    "\332\071\321\140\u011c\001\002\000\016\004\326\005\325" +
    "\013\323\014\322\017\332\071\321\001\002\000\016\013" +
    "\336\014\334\015\337\016\341\017\335\140\u011e\001\002" +
    "\000\020\004\326\005\325\013\323\014\322\017\332\020" +
    "\uffd8\071\321\001\002\000\016\013\336\014\334\015\337" +
    "\016\341\017\335\020\uffda\001\002\000\016\013\336\014" +
    "\334\015\337\016\341\017\335\020\uffd9\001\002\000\010" +
    "\006\u0123\071\u0124\112\u0122\001\002\000\004\010\u012b\001" +
    "\002\000\006\020\uffe0\140\uffe0\001\002\000\004\010\u012a" +
    "\001\002\000\004\140\u0126\001\002\000\010\006\u0123\071" +
    "\u0124\112\u0122\001\002\000\004\020\u0128\001\002\000\004" +
    "\012\u0129\001\002\000\016\022\ufff8\071\ufff8\072\ufff8\074" +
    "\ufff8\111\ufff8\112\ufff8\001\002\000\006\020\uffde\140\uffde" +
    "\001\002\000\004\073\u012c\001\002\000\004\135\u012d\001" +
    "\002\000\004\017\u012e\001\002\000\004\020\u012f\001\002" +
    "\000\006\020\uffdf\140\uffdf\001\002\000\004\101\u0132\001" +
    "\002\000\004\020\u013a\001\002\000\022\004\326\005\325" +
    "\006\324\007\330\013\323\014\322\017\332\071\321\001" +
    "\002\000\004\102\u0137\001\002\000\006\102\ufff9\140\u0135" +
    "\001\002\000\022\004\326\005\325\006\324\007\330\013" +
    "\323\014\322\017\332\071\321\001\002\000\004\102\ufffa" +
    "\001\002\000\006\020\ufffb\140\u0138\001\002\000\004\101" +
    "\u0132\001\002\000\004\020\ufffc\001\002\000\004\012\u013b" +
    "\001\002\000\016\022\000\071\000\072\000\074\000\111" +
    "\000\112\000\001\002\000\004\017\u013d\001\002\000\010" +
    "\006\u0123\071\u0124\112\u0122\001\002\000\004\020\u0142\001" +
    "\002\000\006\020\uffdc\140\u0140\001\002\000\012\043\106" +
    "\044\105\045\111\046\107\001\002\000\004\020\uffdd\001" +
    "\002\000\004\012\u0143\001\002\000\016\022\ufff2\071\ufff2" +
    "\072\ufff2\074\ufff2\111\ufff2\112\ufff2\001\002\000\010\006" +
    "\u0123\071\u0124\112\u0122\001\002\000\004\020\u0146\001\002" +
    "\000\004\012\u0147\001\002\000\016\022\uffed\071\uffed\072" +
    "\uffed\074\uffed\111\uffed\112\uffed\001\002\000\010\006\u0123" +
    "\071\u0124\112\u0122\001\002\000\004\020\u014a\001\002\000" +
    "\004\012\u014b\001\002\000\016\022\uffec\071\uffec\072\uffec" +
    "\074\uffec\111\uffec\112\uffec\001\002\000\004\017\u0177\001" +
    "\002\000\004\017\u0173\001\002\000\004\017\u016f\001\002" +
    "\000\004\017\u016c\001\002\000\004\017\u0168\001\002\000" +
    "\004\017\u0164\001\002\000\004\017\u0160\001\002\000\004" +
    "\017\u0159\001\002\000\004\017\u0155\001\002\000\010\006" +
    "\u0123\071\u0124\112\u0122\001\002\000\004\020\u0157\001\002" +
    "\000\004\012\u0158\001\002\000\016\022\uffef\071\uffef\072" +
    "\uffef\074\uffef\111\uffef\112\uffef\001\002\000\006\007\u015a" +
    "\071\u015b\001\002\000\004\020\ufffd\001\002\000\004\010" +
    "\u015f\001\002\000\004\020\u015d\001\002\000\004\012\u015e" +
    "\001\002\000\016\022\uffff\071\uffff\072\uffff\074\uffff\111" +
    "\uffff\112\uffff\001\002\000\004\020\ufffe\001\002\000\012" +
    "\043\106\044\105\045\111\046\107\001\002\000\004\020" +
    "\u0162\001\002\000\004\012\u0163\001\002\000\016\022\ufff1" +
    "\071\ufff1\072\ufff1\074\ufff1\111\ufff1\112\ufff1\001\002\000" +
    "\010\006\u0123\071\u0124\112\u0122\001\002\000\004\020\u0166" +
    "\001\002\000\004\012\u0167\001\002\000\016\022\ufff5\071" +
    "\ufff5\072\ufff5\074\ufff5\111\ufff5\112\ufff5\001\002\000\010" +
    "\006\u0114\054\u0117\071\u0115\001\002\000\004\020\u016a\001" +
    "\002\000\004\012\u016b\001\002\000\016\022\uffe9\071\uffe9" +
    "\072\uffe9\074\uffe9\111\uffe9\112\uffe9\001\002\000\004\020" +
    "\u016d\001\002\000\004\012\u016e\001\002\000\016\022\ufff4" +
    "\071\ufff4\072\ufff4\074\ufff4\111\ufff4\112\ufff4\001\002\000" +
    "\010\006\u0123\071\u0124\112\u0122\001\002\000\004\020\u0171" +
    "\001\002\000\004\012\u0172\001\002\000\016\022\ufff7\071" +
    "\ufff7\072\ufff7\074\ufff7\111\ufff7\112\ufff7\001\002\000\016" +
    "\004\326\005\325\013\323\014\322\017\332\071\321\001" +
    "\002\000\016\013\336\014\334\015\337\016\341\017\335" +
    "\020\u0175\001\002\000\004\012\u0176\001\002\000\016\022" +
    "\uffe7\071\uffe7\072\uffe7\074\uffe7\111\uffe7\112\uffe7\001\002" +
    "\000\016\004\326\005\325\013\323\014\322\017\332\071" +
    "\321\001\002\000\016\013\336\014\334\015\337\016\341" +
    "\017\335\020\u0179\001\002\000\004\012\u017a\001\002\000" +
    "\016\022\uffe5\071\uffe5\072\uffe5\074\uffe5\111\uffe5\112\uffe5" +
    "\001\002\000\024\004\326\005\325\006\u0180\007\u0184\013" +
    "\u017f\014\u017e\017\u0185\025\u0181\071\321\001\002\000\036" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\023" +
    "\uffb7\024\uffb7\075\uffb7\076\uffb7\105\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\001\002\000\024\020\uffc0\023\uffc0\024\uffc0\075" +
    "\uffc0\076\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001\002" +
    "\000\014\004\326\005\325\013\u017f\014\u017e\071\321\001" +
    "\002\000\014\004\326\005\325\013\u017f\014\u017e\071\321" +
    "\001\002\000\024\020\uffbf\023\uffbf\024\uffbf\075\uffbf\076" +
    "\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000\024" +
    "\004\326\005\325\006\u0180\007\u0184\013\u017f\014\u017e\017" +
    "\u0185\025\u0181\071\321\001\002\000\024\020\uffcf\023\u018b" +
    "\024\u018c\075\u0189\076\u018f\105\u018d\106\u0188\107\u018a\110" +
    "\u0187\001\002\000\036\013\u0198\014\u0199\015\u019b\016\u019c" +
    "\017\u019a\020\uffbd\023\uffbd\024\uffbd\075\uffbd\076\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000\024\020\uffbe" +
    "\023\uffbe\024\uffbe\075\uffbe\076\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\001\002\000\024\004\326\005\325\006\u0180" +
    "\007\u0184\013\u017f\014\u017e\017\u0185\025\u0181\071\321\001" +
    "\002\000\024\020\u018e\023\u018b\024\u018c\075\u0189\076\u018f" +
    "\105\u018d\106\u0188\107\u018a\110\u0187\001\002\000\024\004" +
    "\326\005\325\006\u0180\007\u0184\013\u017f\014\u017e\017\u0185" +
    "\025\u0181\071\321\001\002\000\024\004\326\005\325\006" +
    "\u0180\007\u0184\013\u017f\014\u017e\017\u0185\025\u0181\071\321" +
    "\001\002\000\024\004\326\005\325\006\u0180\007\u0184\013" +
    "\u017f\014\u017e\017\u0185\025\u0181\071\321\001\002\000\024" +
    "\004\326\005\325\006\u0180\007\u0184\013\u017f\014\u017e\017" +
    "\u0185\025\u0181\071\321\001\002\000\024\004\326\005\325" +
    "\006\u0180\007\u0184\013\u017f\014\u017e\017\u0185\025\u0181\071" +
    "\321\001\002\000\024\004\326\005\325\006\u0180\007\u0184" +
    "\013\u017f\014\u017e\017\u0185\025\u0181\071\321\001\002\000" +
    "\024\004\326\005\325\006\u0180\007\u0184\013\u017f\014\u017e" +
    "\017\u0185\025\u0181\071\321\001\002\000\024\020\uffc1\023" +
    "\uffc1\024\uffc1\075\uffc1\076\uffc1\105\uffc1\106\uffc1\107\uffc1" +
    "\110\uffc1\001\002\000\024\004\326\005\325\006\u0180\007" +
    "\u0184\013\u017f\014\u017e\017\u0185\025\u0181\071\321\001\002" +
    "\000\024\020\uffc9\023\u018b\024\u018c\075\u0189\076\uffc9\105" +
    "\u018d\106\u0188\107\u018a\110\u0187\001\002\000\024\020\uffc5" +
    "\023\uffc5\024\uffc5\075\uffc5\076\uffc5\105\uffc5\106\uffc5\107" +
    "\uffc5\110\uffc5\001\002\000\024\020\uffc6\023\uffc6\024\uffc6" +
    "\075\uffc6\076\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001" +
    "\002\000\024\020\uffc7\023\uffc7\024\uffc7\075\uffc7\076\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\024\020" +
    "\uffc3\023\uffc3\024\uffc3\075\uffc3\076\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\001\002\000\024\020\uffca\023\u018b\024" +
    "\u018c\075\uffca\076\uffca\105\u018d\106\u0188\107\u018a\110\u0187" +
    "\001\002\000\024\020\uffc4\023\uffc4\024\uffc4\075\uffc4\076" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\001\002\000\024" +
    "\020\uffc2\023\uffc2\024\uffc2\075\uffc2\076\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\001\002\000\014\004\326\005\325" +
    "\013\u017f\014\u017e\071\321\001\002\000\014\004\326\005" +
    "\325\013\u017f\014\u017e\071\321\001\002\000\014\004\326" +
    "\005\325\013\u017f\014\u017e\071\321\001\002\000\014\004" +
    "\326\005\325\013\u017f\014\u017e\071\321\001\002\000\014" +
    "\004\326\005\325\013\u017f\014\u017e\071\321\001\002\000" +
    "\036\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\023\uffb9\024\uffb9\075\uffb9\076\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\001\002\000\036\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\023\uffba\024\uffba\075\uffba\076" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\001\002\000\016" +
    "\013\u0198\014\u0199\015\u019b\016\u019c\017\u019a\020\u01a0\001" +
    "\002\000\036\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\023\uffb8\024\uffb8\075\uffb8\076\uffb8\105\uffb8\106" +
    "\uffb8\107\uffb8\110\uffb8\001\002\000\036\013\uffbb\014\uffbb" +
    "\015\u019b\016\u019c\017\uffbb\020\uffbb\023\uffbb\024\uffbb\075" +
    "\uffbb\076\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002" +
    "\000\036\013\uffbc\014\uffbc\015\u019b\016\u019c\017\uffbc\020" +
    "\uffbc\023\uffbc\024\uffbc\075\uffbc\076\uffbc\105\uffbc\106\uffbc" +
    "\107\uffbc\110\uffbc\001\002\000\004\020\u01a4\001\002\000" +
    "\004\077\u01a5\001\002\000\016\071\353\072\275\074\276" +
    "\100\355\111\303\112\354\001\002\000\022\022\uffce\071" +
    "\uffce\072\uffce\074\uffce\100\uffce\111\uffce\112\uffce\137\uffce" +
    "\001\002\000\022\022\uffcb\071\uffcb\072\uffcb\074\uffcb\100" +
    "\uffcb\111\uffcb\112\uffcb\137\u01a9\001\002\000\020\022\uffcd" +
    "\071\uffcd\072\uffcd\074\uffcd\100\uffcd\111\uffcd\112\uffcd\001" +
    "\002\000\004\077\u01aa\001\002\000\016\071\353\072\275" +
    "\074\276\100\355\111\303\112\354\001\002\000\020\022" +
    "\uffcc\071\uffcc\072\uffcc\074\uffcc\100\uffcc\111\uffcc\112\uffcc" +
    "\001\002\000\024\020\uffc8\023\u018b\024\u018c\075\u0189\076" +
    "\u018f\105\u018d\106\u0188\107\u018a\110\u0187\001\002\000\036" +
    "\013\uffb5\014\uffb5\015\u019b\016\u019c\017\uffb5\020\uffb5\023" +
    "\uffb5\024\uffb5\075\uffb5\076\uffb5\105\uffb5\106\uffb5\107\uffb5" +
    "\110\uffb5\001\002\000\036\013\uffb6\014\uffb6\015\u019b\016" +
    "\u019c\017\uffb6\020\uffb6\023\uffb6\024\uffb6\075\uffb6\076\uffb6" +
    "\105\uffb6\106\uffb6\107\uffb6\110\uffb6\001\002\000\004\010" +
    "\u01b7\001\002\000\006\012\uff96\073\uff96\001\002\000\004" +
    "\012\u01b6\001\002\000\006\012\uff98\073\u01b3\001\002\000" +
    "\006\006\u01b0\071\u01af\001\002\000\004\012\uff9a\001\002" +
    "\000\004\012\uff99\001\002\000\020\022\uff9b\071\uff9b\072" +
    "\uff9b\074\uff9b\100\uff9b\111\uff9b\112\uff9b\001\002\000\006" +
    "\012\uff97\073\uff97\001\002\000\004\036\u01b9\001\002\000" +
    "\024\004\326\005\325\006\324\007\330\013\323\014\322" +
    "\017\332\071\321\112\u01ba\001\002\000\004\010\u01bb\001" +
    "\002\000\004\073\u01bc\001\002\000\016\116\u01c2\120\u01bf" +
    "\125\u01be\127\u01c1\131\u01c0\135\u01bd\001\002\000\004\017" +
    "\u01d2\001\002\000\004\017\u01cf\001\002\000\004\017\u01cc" +
    "\001\002\000\004\017\u01c9\001\002\000\004\017\u01c6\001" +
    "\002\000\004\017\u01c3\001\002\000\004\020\u01c4\001\002" +
    "\000\004\012\u01c5\001\002\000\016\022\ufff0\071\ufff0\072" +
    "\ufff0\074\ufff0\111\ufff0\112\ufff0\001\002\000\004\020\u01c7" +
    "\001\002\000\004\012\u01c8\001\002\000\016\022\uffe6\071" +
    "\uffe6\072\uffe6\074\uffe6\111\uffe6\112\uffe6\001\002\000\004" +
    "\020\u01ca\001\002\000\004\012\u01cb\001\002\000\016\022" +
    "\uffe4\071\uffe4\072\uffe4\074\uffe4\111\uffe4\112\uffe4\001\002" +
    "\000\004\020\u01cd\001\002\000\004\012\u01ce\001\002\000" +
    "\016\022\uffee\071\uffee\072\uffee\074\uffee\111\uffee\112\uffee" +
    "\001\002\000\004\020\u01d0\001\002\000\004\012\u01d1\001" +
    "\002\000\016\022\uffe8\071\uffe8\072\uffe8\074\uffe8\111\uffe8" +
    "\112\uffe8\001\002\000\004\020\u01d3\001\002\000\004\012" +
    "\u01d4\001\002\000\016\022\ufff6\071\ufff6\072\ufff6\074\ufff6" +
    "\111\ufff6\112\ufff6\001\002\000\020\004\065\005\061\006" +
    "\060\010\055\025\063\073\062\112\056\001\002\000\004" +
    "\024\u01d7\001\002\000\004\016\u01d8\001\002\000\004\050" +
    "\u01d9\001\002\000\004\023\u01da\001\002\000\004\024\uff68" +
    "\001\002\000\020\004\065\005\061\006\060\010\055\025" +
    "\063\073\062\112\056\001\002\000\004\024\u01dd\001\002" +
    "\000\004\016\u01de\001\002\000\004\051\u01df\001\002\000" +
    "\004\023\u01e0\001\002\000\004\024\uff67\001\002\000\046" +
    "\004\065\005\061\006\060\010\055\016\043\022\037\024" +
    "\uff45\025\063\026\033\041\034\042\051\050\036\051\035" +
    "\052\044\057\045\062\050\073\062\112\056\001\002\000" +
    "\004\023\uff73\001\002\000\004\023\u01e6\001\002\000\030" +
    "\016\043\022\037\024\uff45\026\033\041\034\042\051\050" +
    "\036\051\035\052\044\057\045\062\050\001\002\000\004" +
    "\023\uff72\001\002\000\004\024\uff74\001\002\000\004\024" +
    "\uff75\001\002\000\030\016\043\022\037\024\uff45\026\033" +
    "\041\034\042\051\050\036\051\035\052\044\057\045\062" +
    "\050\001\002\000\004\023\uff53\001\002\000\006\037\u01ec" +
    "\040\u01ed\001\002\000\004\023\u01ee\001\002\000\004\023" +
    "\uff42\001\002\000\004\023\uff41\001\002\000\004\024\uff44" +
    "\001\002\000\004\023\u01f0\001\002\000\004\024\u01f1\001" +
    "\002\000\004\033\u01f2\001\002\000\004\023\u01f3\001\002" +
    "\000\020\004\065\005\061\006\060\010\055\025\063\073" +
    "\062\112\056\001\002\000\004\024\u01f5\001\002\000\004" +
    "\016\u01f6\001\002\000\004\033\u01f7\001\002\000\004\023" +
    "\u01f8\001\002\000\004\024\u01f9\001\002\000\004\016\u01fa" +
    "\001\002\000\004\032\u01fb\001\002\000\004\023\u01fc\001" +
    "\002\000\004\024\uff55\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\004\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\037\007\025\014\024\016\046\022\031\023" +
    "\030\024\027\025\041\030\045\032\026\040\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\262\001\001\000\012\026" +
    "\222\027\221\036\220\037\217\001\001\000\004\031\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\052\001\001\000\002\001\001\000\006" +
    "\013\063\017\056\001\001\000\002\001\001\000\004\013" +
    "\102\001\001\000\004\013\101\001\001\000\002\001\001" +
    "\000\004\013\074\001\001\000\004\013\073\001\001\000" +
    "\004\013\072\001\001\000\004\013\071\001\001\000\002" +
    "\001\001\000\004\013\070\001\001\000\002\001\001\000" +
    "\004\025\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\133\052\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\140\024\137" +
    "\030\136\035\141\040\142\001\001\000\004\075\151\001" +
    "\001\000\006\013\133\052\146\001\001\000\006\013\133" +
    "\052\145\001\001\000\006\013\133\052\144\001\001\000" +
    "\002\001\001\000\006\013\133\052\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\133\052\154\001\001\000" +
    "\002\001\001\000\014\016\140\024\137\030\136\035\156" +
    "\040\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\166\001" +
    "\001\000\002\001\001\000\006\013\133\052\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\235\001\001\000\004\037\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\227\001\001\000\002" +
    "\001\001\000\010\027\232\036\233\037\231\001\001\000" +
    "\002\001\001\000\004\036\235\001\001\000\002\001\001" +
    "\000\004\037\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\252\001" +
    "\001\000\004\037\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\256\001\001\000\004\036\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\270\007\025" +
    "\014\024\016\046\022\031\023\030\024\027\025\041\030" +
    "\045\032\026\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\041\305\042\303\045\304\053\307\057" +
    "\277\063\300\071\301\074\306\001\001\000\002\001\001" +
    "\000\006\046\u01b1\047\u01b0\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\041\u0106\042\303\045\304\053\307" +
    "\057\277\063\300\071\301\074\306\001\001\000\022\041" +
    "\u0105\042\303\045\304\053\307\057\277\063\300\071\301" +
    "\074\306\001\001\000\022\041\u0104\042\303\045\304\053" +
    "\307\057\277\063\300\071\301\074\306\001\001\000\002" +
    "\001\001\000\022\041\315\042\303\045\304\053\307\057" +
    "\277\063\300\071\301\074\306\001\001\000\022\041\314" +
    "\042\303\045\304\053\307\057\277\063\300\071\301\074" +
    "\306\001\001\000\002\001\001\000\022\041\311\042\303" +
    "\045\304\053\307\057\277\063\300\071\301\074\306\001" +
    "\001\000\022\041\310\042\303\045\304\053\307\057\277" +
    "\063\300\071\301\074\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\326\044\330\051" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\u0102\051\317\001\001\000\006\044\u0101\051\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\332\051\317\001\001\000\002\001\001" +
    "\000\006\044\346\051\317\001\001\000\006\044\344\051" +
    "\317\001\001\000\006\044\343\051\317\001\001\000\006" +
    "\044\342\051\317\001\001\000\002\001\001\000\006\044" +
    "\341\051\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\357\045\360\053\361\057\355\061\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\357\045\360\053\361\057\355\061\365\001\001\000" +
    "\002\001\001\000\014\042\357\045\360\053\361\057\355" +
    "\061\364\001\001\000\014\042\357\045\360\053\361\057" +
    "\355\061\363\001\001\000\014\042\357\045\360\053\361" +
    "\057\355\061\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\042\357\045\360\053\361\057\355" +
    "\061\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\377\044\330\051\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u0110\001\001\000\002\001\001\000\006\064\u0112\101\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u011c\051" +
    "\317\001\001\000\006\044\u011f\051\317\001\001\000\002" +
    "\001\001\000\006\044\u011e\051\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0130\001\001\000\002\001" +
    "\001\000\012\043\u0133\044\330\051\317\073\u0132\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\u0133\044" +
    "\330\051\317\073\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\u013d\100\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u0155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0168\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\u016f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\u0173\051\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\u0177" +
    "\051\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\u017b\055\u0181\067\u017c\070\u0182" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u017b\070\u01ad\001\001\000\006\051\u017b\070\u01ac\001\001" +
    "\000\002\001\001\000\012\051\u017b\055\u01ab\067\u017c\070" +
    "\u0182\001\001\000\004\107\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\051\u017b\055\u0185\067\u017c\070" +
    "\u0182\001\001\000\002\001\001\000\012\051\u017b\055\u0196" +
    "\067\u017c\070\u0182\001\001\000\012\051\u017b\055\u0195\067" +
    "\u017c\070\u0182\001\001\000\012\051\u017b\055\u0194\067\u017c" +
    "\070\u0182\001\001\000\012\051\u017b\055\u0193\067\u017c\070" +
    "\u0182\001\001\000\012\051\u017b\055\u0192\067\u017c\070\u0182" +
    "\001\001\000\012\051\u017b\055\u0191\067\u017c\070\u0182\001" +
    "\001\000\012\051\u017b\055\u0190\067\u017c\070\u0182\001\001" +
    "\000\002\001\001\000\012\051\u017b\055\u018f\067\u017c\070" +
    "\u0182\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u017b" +
    "\070\u01a1\001\001\000\006\051\u017b\070\u01a0\001\001\000" +
    "\006\051\u017b\070\u019e\001\001\000\006\051\u017b\070\u019d" +
    "\001\001\000\006\051\u017b\070\u019c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\042\357\045\360\053\361\057\355" +
    "\061\u01a5\001\001\000\004\110\u01a6\001\001\000\004\054" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\357\045\360\053\361\057\355\061\u01aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u01b3\001\001\000\006\046\u01b1\047\u01b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\377" +
    "\044\330\051\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u01db\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\u01e1\007\025\013\u01e3\014\024\015\u01e2\016\046\022\031" +
    "\023\030\024\027\025\041\030\045\032\026\040\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\u01e4" +
    "\007\025\014\024\016\046\022\031\023\030\024\027\025" +
    "\041\030\045\032\026\040\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\u01e8\007" +
    "\025\014\024\016\046\022\031\023\030\024\027\025\041" +
    "\030\045\032\026\040\040\001\001\000\002\001\001\000" +
    "\004\012\u01ea\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    private String Funci="";
    private ArrayList<Integer> NVeces = new ArrayList<Integer>();
    public  ArrayList<Token> ErrorT = new ArrayList<Token> ();
    private int NV=1;
    
    public V9 MO = new V9();
    private String ContenidoBoton="";

    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
        Token N= new Token(s.value.toString(),s.left+1,s.right+1);
        ErrorT.add(N);

        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    private int A(String S){

        return   Integer.parseInt(S);
    }

    public void setSalida(String cadena)
    {
        salida = cadena;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STRUCT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TABA ::= numeral id igual creartabla para MUCHO parc puntocoma 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 MO.AF(h,5); MO.FSC(h,a);  RESULT=  "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABA",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TABA ::= numeral id punto setborder para NBO parc puntocoma 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.FSB(z,a); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABA",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NBO ::= dolar id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=MO.R(a,"$");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NBO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NBO ::= booleano 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NBO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MUCHO ::= cora MUC corc coma MUCHO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<TR>"+a+"</TR>"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHO",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MUCHO ::= cora MUC corc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="<TR>"+a+"</TR>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUCHO",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MUC ::= VAL coma MUC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<TD>"+a+"</TD>"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUC",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MUC ::= VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<TD>"+a+"</TD>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUC",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUBOT ::= numeral id igual crearboton para STRM coma STRM parc puntocoma 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.AF(z,6); MO.FSTB(z,b); MO.FSAB(z,a); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUBOT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUBOT ::= numeral id punto settexto para STRM parc puntocoma 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 MO.FSTB(z,a); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUBOT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUBOT ::= dolar id igual numeral id punto gettexto para parc puntocoma 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(z,MO.FGTB(b),"$");  RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUBOT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUBOT ::= numeral id punto clickboton para STRM parc puntocoma 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 MO.FSAB(z,b); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUBOT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NATIV ::= numeral id punto insertar para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		RESULT=MO.Insertar(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
MO.AF(a,1);Funci=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NATIV ::= numeral id igual crearparrafo NT$0 para MH parc puntocoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NATIV ::= numeral id punto setalineacion para ALIP parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 MO.FSA(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NATIV ::= dolar id igual numeral id punto getalineacion para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(a,MO.FGA(b),"$"); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NATIV ::= numeral id punto setcontenido para STRM parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.FSC(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NATIV ::= dolar id igual numeral id punto getcontenido para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(a,MO.FGC(b),"$"); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NATIV ::= numeral id igual creartextoa para STRM parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.AF(a,2);MO.FSC(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NATIV ::= numeral id igual creartextob para STRM parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.AF(a,3);MO.FSC(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
MO.AF(a,4);Funci=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NATIV ::= numeral id igual crearimagen NT$1 para PZ parc puntocoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NATIV ::= numeral id punto setpath para STRH parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.FSP(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NATIV ::= dolar id igual numeral id punto getpath para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(a,MO.FGP(b),"$"); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NATIV ::= numeral id punto setalto para VALN parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.FSAL(a,c);Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NATIV ::= dolar id igual numeral id punto getalto para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(a,MO.FGAL(b),"$");  Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NATIV ::= numeral id punto setancho para VALN parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MO.FSAN(a,c); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NATIV ::= dolar id igual numeral id punto getancho para parc puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		MO.A(a,MO.FGAN(b),"$"); Funci=""; RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIV",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STRH ::= imgdir 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRH",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STRH ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRH",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STRH ::= dolar id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="$"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRH",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRM ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRM",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRM ::= numeral id punto gettexto para parc 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT=MO.FGTB(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRM",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRM ::= dolar id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=MO.R(a,"$");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRM",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MH ::= STRM coma ALIP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		MO.FSC(Funci, a); MO.FSA(Funci,b); RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MH",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MH ::= STRM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		MO.FSC(Funci,a); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MH",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PZ ::= STRH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MO.FSP(Funci,a); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PZ",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PZ ::= STRH coma VALN coma VALN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MO.FSP(Funci,a); MO.FSAL(Funci,b); MO.FSAN(Funci,c); RESULT=a+b+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PZ",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PZ ::= STRH coma coma VALN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		MO.FSP(Funci,a); MO.FSAN(Funci,b); RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PZ",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PZ ::= STRH coma VALN coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		MO.FSP(Funci,a); MO.FSAL(Funci,b);  RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PZ",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
NV=NV*MO.Pint(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REP ::= repetir para VAL NT$2 parc llaa CUERSP 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NV=NV/MO.Pint(a); String M=""; int lol=MO.Pint(a); for(int i=0;i<lol;i++){M=M+b;} b=M; int Tamaño=NVeces.size();  RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REP",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERSP ::= ECH CUERSP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERSP ::= SI CUERSP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERSP ::= REP CUERSP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERSP ::= VAR CUERSP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERSP ::= numeral id punto insertar para parc puntocoma CUERSP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=MO.Insertar(a)+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERSP ::= llac 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERSP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(cadena.contains("true")){MO.BO=true;}else{MO.BO=false;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
MO.BO=!(MO.BO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SI ::= ifv para INTE NT$3 parc llaa CUERSP NT$4 ELS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MO.BO=true; if(cadena.contains("true")){RESULT=cadena1;}else{RESULT=cadena2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELS ::= elses llaa CUERSP 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELS ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INTE ::= INTE anddoble INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(a.contains("true") && b.contains("true")){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INTE ::= INTE ordoble INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(a.contains("true") || b.contains("true")){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INTE ::= admira INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   if(a.contains("true")){RESULT="false";}else{RESULT="true";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INTE ::= INTE may INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(MO.P(a)>MO.P(b)){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INTE ::= INTE men INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(MO.P(a)<MO.P(b)){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INTE ::= INTE menorigual INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(MO.P(a)<=MO.P(b)){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INTE ::= INTE mayorigual INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(MO.P(a)>=MO.P(b)){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INTE ::= INTE diferente INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(a.toLowerCase().equals(b.toLowerCase())){RESULT="false";}else{RESULT="true";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INTE ::= INTE igualdoble INTE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(a.toLowerCase().equals(b.toLowerCase())){RESULT="true";}else{RESULT="false";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INTE ::= para INTE parc 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(cadena1); RESULT="("+cadena1+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INTE ::= VAL1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTE",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL1 ::= cadena 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL1 ::= booleano 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAL1 ::= VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALN1 ::= VALN1 suma VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)+ MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALN1 ::= VALN1 resta VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)- MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALN1 ::= VALN1 multi VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)* MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALN1 ::= VALN1 div VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)/ MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALN1 ::= VALN1 para VALN1 parc 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(MO.P(cadena1)*MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALN1 ::= ANUM 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALN1 ::= resta VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="-"+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALN1 ::= suma VALN1 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SCRIPT ::= interro hs CUERS interro may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= cadena+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERS ::= VAR CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERS ::= ECH CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERS ::= SI CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CUERS ::= REP CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUERS ::= NATIV CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUERS ::= TABA CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUERS ::= FUBOT CUERS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUERS ::= 
            {
              String RESULT =null;
		RESULT= "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR ::= dolar id igual VAL puntocoma 
            {
              String RESULT =null;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 MO.A(cadena2,cadena1,"$"); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ANUM ::= entero 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANUM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ANUM ::= decimal 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANUM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ANUM ::= dolar id 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= MO.R(cadena1,"$");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANUM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VAL ::= cadena 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VAL ::= booleano 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VAL ::= VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALN ::= VALN suma VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)+ MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALN ::= VALN resta VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)- MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALN ::= VALN multi VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)* MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALN ::= VALN div VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(MO.P(cadena1)/ MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALN ::= para VALN parc 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+MO.P("("+cadena1+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALN ::= VALN para VALN parc 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(MO.P(cadena1)*MO.P(cadena2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALN ::= ANUM 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALN ::= resta VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+("-"+cadena1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALN ::= suma VALN 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(cadena1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALN",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ECH ::= echo CONCAS puntocoma 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Tamaño=NVeces.size();int Contenido=1; Contenido=NV; MO.I(cadena1+"\n",Contenido); RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECH",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONCAS ::= CONCA CONCASS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCAS",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONCASS ::= punto CONCAS 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCASS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONCASS ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCASS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONCA ::= dolar id 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=MO.R(cadena1,"$"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONCA ::= cadena 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IMAP ::= path igual IMD IMAPP 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena+(char)34+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMAP ::= IMAPP path igual IMD 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena+(char)34+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IMAP ::= ALT1 path igual IMD ALT2 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena1+(char)34+cadena+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMAP ::= ALT2 path igual IMD ALT1 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena1+(char)34+cadena+cadena2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IMAP ::= path igual IMD 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena+(char)34;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IMAP ::= path igual IMD ALT1 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena+(char)34+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IMAP ::= path igual IMD ALT2 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="src = "+(char)34+cadena+(char)34+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IMD ::= imgdir 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMD",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMD ::= cadena 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMD",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMAPP ::= ALT1 ALT2 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena +cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAPP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IMAPP ::= ALT2 ALT1 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena +cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAPP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ALT1 ::= alto igual entero 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" height= "+(char)34+cadena+(char)34;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALT1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ALT2 ::= ancho igual entero 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" width= "+(char)34+cadena+(char)34;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALT2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BOT ::= boton BOTP may men div boton may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		RESULT="<button "+cadena+ " >"+ContenidoBoton+" </button>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BOTP ::= idboton igual cadena textoboton igual cadena 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= " CLASS= "+cadena; ContenidoBoton=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BOTP ::= textoboton igual cadena idboton igual cadena 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= " CLASS= "+cadena;  ContenidoBoton=cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TAB ::= tabla borde igual booleano may men FIL div tabla may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT="\n<TABLE border="+(char)34+cadena+(char)34+">"+cadena1+"</TABLE>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAB",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FIL ::= fila may men COLU div fila may men FIL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="\n<TR>"+cadena+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FIL ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COLU ::= columnac may MCONN may men COLU 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="\n<TD><B>"+cadena+cadena2+"</B></TD>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLU",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COLU ::= columna may MCONN may men COLU 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="\n<TD>"+cadena+cadena2+"</TD>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLU",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COLU ::= 
            {
              String RESULT =null;
		RESULT="</TR>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLU",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MCONN ::= ESPECIAL men MCON 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" "+cadena+cadena1+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MCONN ::= men MCON 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" "+cadena+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MCON ::= PARRA MCONN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=" "+cadena+cadena2+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCON",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MCON ::= IMA MCONN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" "+cadena+cadena2+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCON",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MCON ::= BOT MCONN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" "+cadena+cadena2+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCON",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MCON ::= SCRIPT MCONN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=" "+cadena+cadena2+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCON",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MCON ::= div MCONNN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCON",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MCONNN ::= salto may MCONN 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<BR> "+cadena+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONNN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MCONNN ::= columnac 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONNN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MCONNN ::= columna 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONNN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SAL ::= salto may 
            {
              String RESULT =null;
		RESULT="<BR> \n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ESPA ::= espacio may ESPAP may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=" <DIV> " + cadena +" </DIV> ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ESPAP ::= CONTE 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPAP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ESPAP ::= ESPECIAL CONTE 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena+" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPAP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARRA ::= parrafo ALI PARRAP men div parrafo may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=" <P "+ cadena +cadena1 +"\n</P>" ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARRA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARRAP ::= ESPECIAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARRAP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARRAP ::= men div SAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARRAP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ALI ::= alineacion igual ALIP may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="ALIGN= "+ cadena +" >\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ALI ::= may 
            {
              String RESULT =null;
		RESULT=">\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ALIP ::= izquierda 
            {
              String RESULT =null;
		RESULT=" LEFT ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ALIP ::= derecha 
            {
              String RESULT =null;
		RESULT=" RIGHT ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ALIP ::= centrado 
            {
              String RESULT =null;
		RESULT=" CENTER ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ALIP ::= justificado 
            {
              String RESULT =null;
		RESULT=" JUSTIFY ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TEXA ::= textoa may ESPECIAL men div textoa may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<H1>"+cadena+"</H1>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TEXB ::= textob may ESPECIAL men div textob may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<H3>"+cadena+"</H3>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXB",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IMA ::= imagen IMAP may men div imagen may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		RESULT="<img "+cadena+" >\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ESPECIAL ::= id ESPECIAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena+" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ESPECIAL ::= entero ESPECIAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena+" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ESPECIAL ::= decimal ESPECIAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena+" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ESPECIAL ::= numeral ESPECIAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena+" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ESPECIAL ::= cadena ESPECIAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=val +" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ESPECIAL ::= punto ESPECIAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=val +" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ESPECIAL ::= admira ESPECIAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=val +" "+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ESPECIAL ::= cadena 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=val ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ESPECIAL ::= id 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ESPECIAL ::= entero 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ESPECIAL ::= decimal 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ESPECIAL ::= numeral 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ESPECIAL ::= punto 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ESPECIAL ::= admira 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COMENTA ::= men admira ESPECIAL admira may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // STRUCT ::= men compi may CABE CUERP men div compi may 
            {
              String RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		setSalida("<HTML>\n"+cadena1+cadena2+"</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CABE ::= men cabecera may men titulo may ESPECIAL men div titulo may men div cabecera may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		RESULT="<HEAD><TITLE>"+cadena+"</TITLE></HEAD>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CUERP ::= men cuerpo CO men CONTE may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="<BODY"+cadena+cadena1+"</BODY>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONTE ::= CONTES men CONTE 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cadena+cadena1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONTE ::= div CONTESS 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cadena;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONTESS ::= cuerpo 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTESS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONTESS ::= espacio 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTESS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONTESS ::= salto may men CONTE 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<BR>"+cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTESS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONTES ::= PARRA 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONTES ::= SAL 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONTES ::= TAB 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTES ::= IMA 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONTES ::= TEXA 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONTES ::= TEXB 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONTES ::= BOT 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONTES ::= ESPA 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONTES ::= SCRIPT 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONTES ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CO ::= fondo igual COL may 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=" bgcolor= "+cadena+">\n ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CO ::= may 
            {
              String RESULT =null;
		RESULT=">\n ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // COL ::= color 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // COL ::= rgb 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cadena;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
