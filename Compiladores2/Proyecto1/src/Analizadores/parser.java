
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Arbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\004" +
    "\005\000\002\004\004\000\002\025\003\000\002\025\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\004\000\002\024\005" +
    "\000\002\024\002\000\002\003\006\000\002\006\005\000" +
    "\002\007\005\000\002\010\007\000\002\011\011\000\002" +
    "\011\013\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\004\000\002\012\006\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\011\000\002\014\010\000\002\014" +
    "\007\000\002\014\007\000\002\014\006\000\002\015\011" +
    "\000\002\016\011\000\002\017\013\000\002\021\011\000" +
    "\002\021\011\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\026\010\020\030\012\033\025\047\026\052" +
    "\005\053\011\054\022\055\004\056\007\057\017\001\002" +
    "\000\004\017\234\001\002\000\104\002\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\001\002\000\100" +
    "\002\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000" +
    "\104\002\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\026\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\001\002\000\030\002\000\010\020\030\012\033" +
    "\025\047\026\052\005\053\011\054\022\055\004\056\007" +
    "\057\017\001\002\000\004\017\226\001\002\000\004\017" +
    "\216\001\002\000\100\002\ufffb\010\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\001\002\000\034\002\ufffc\010\ufffc\012\126\030" +
    "\ufffc\033\ufffc\034\ufffc\047\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\001\002\000\100\002\ufff6\010" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\026\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\100\002\ufffa" +
    "\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000\106\002" +
    "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\211\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\001\002\000\006\017\206\025\055\001\002\000" +
    "\100\002\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\026\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002" +
    "\000\004\033\200\001\002\000\100\002\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\001\002\000\100\002\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\001\002\000\026\010\020\030" +
    "\012\033\025\047\026\052\005\053\011\054\022\055\004" +
    "\056\007\057\017\001\002\000\004\017\033\001\002\000" +
    "\100\002\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\026\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002" +
    "\000\100\002\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\026\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001" +
    "\002\000\004\002\032\001\002\000\004\002\001\001\002" +
    "\000\030\004\044\005\041\006\040\007\046\010\035\011" +
    "\042\013\037\014\036\017\051\024\043\060\050\001\002" +
    "\000\042\013\063\014\061\015\070\016\060\020\150\021" +
    "\066\022\072\023\074\031\067\032\065\037\075\040\064" +
    "\041\071\042\062\045\057\046\073\001\002\000\102\002" +
    "\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\142\020\uffde\021\uffde\022\uffde\023\uffde\026\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002" +
    "\000\030\004\044\005\041\006\040\007\046\010\035\011" +
    "\042\013\037\014\036\017\051\024\043\060\050\001\002" +
    "\000\030\004\044\005\041\006\040\007\046\010\035\011" +
    "\042\013\037\014\036\017\051\024\043\060\050\001\002" +
    "\000\100\002\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001" +
    "\002\000\100\002\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\001\002\000\100\002\uffd4\010\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\100\002\uffd2\010\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\001\002\000\100\002\uffce\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\001\002\000\100\002\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\001\002\000\100\002\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\001\002\000\004\017\131\001\002" +
    "\000\004\010\054\001\002\000\006\020\uffc2\044\uffc2\001" +
    "\002\000\006\020\120\044\117\001\002\000\004\025\055" +
    "\001\002\000\030\004\044\005\041\006\040\007\046\010" +
    "\035\011\042\013\037\014\036\017\051\024\043\060\050" +
    "\001\002\000\100\002\uffeb\010\uffeb\012\uffeb\013\063\014" +
    "\061\015\070\016\060\020\uffeb\021\066\022\072\023\074" +
    "\026\uffeb\030\uffeb\031\067\032\065\033\uffeb\034\uffeb\037" +
    "\075\040\064\041\071\042\062\044\uffeb\045\057\046\073" +
    "\047\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\026\010\020\030\012\033\025\047\026" +
    "\052\005\053\011\054\022\055\004\056\007\057\017\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\030\004\044\005\041\006\040\007\046\010\035" +
    "\011\042\013\037\014\036\017\051\024\043\060\050\001" +
    "\002\000\100\002\uffda\010\uffda\012\uffda\013\063\014\061" +
    "\015\070\016\060\020\uffda\021\uffda\022\uffda\023\uffda\026" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\044\uffda\045\057\046\073\047" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\001\002\000\100\002\uffd8\010\uffd8\012\uffd8\013\063\014" +
    "\061\015\070\016\060\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\057\046\073" +
    "\047\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\001\002\000\100\002\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\057\046" +
    "\uffe2\047\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\001\002\000\100\002\uffd9\010\uffd9\012\uffd9\013" +
    "\063\014\061\015\070\016\060\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\045\057" +
    "\046\073\047\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\001\002\000\100\002\uffdc\010\uffdc\012\uffdc" +
    "\013\063\014\061\015\070\016\060\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\045" +
    "\057\046\073\047\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\001\002\000\100\002\uffe5\010\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5" +
    "\045\057\046\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\001\002\000\100\002\uffd5\010\uffd5" +
    "\012\uffd5\013\063\014\061\015\070\016\060\020\uffd5\021" +
    "\uffd5\022\072\023\074\026\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\037\075\040\064\041\071\042\062\044" +
    "\uffd5\045\057\046\073\047\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\001\002\000\004\026\106\001" +
    "\002\000\026\010\020\030\012\033\025\047\026\052\005" +
    "\053\011\054\022\055\004\056\007\057\017\001\002\000" +
    "\100\002\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\026\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\044\uffea\045\uffea\046\uffea\047\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\001\002" +
    "\000\100\002\uffd6\010\uffd6\012\uffd6\013\063\014\061\015" +
    "\070\016\060\020\uffd6\021\uffd6\022\072\023\074\026\uffd6" +
    "\030\uffd6\031\067\032\uffd6\033\uffd6\034\uffd6\037\075\040" +
    "\064\041\071\042\062\044\uffd6\045\057\046\073\047\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001" +
    "\002\000\100\002\uffdb\010\uffdb\012\uffdb\013\063\014\061" +
    "\015\070\016\060\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045\057\046\073\047" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\001\002\000\100\002\uffe7\010\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\070\016\060\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\044\uffe7\045\057\046\073" +
    "\047\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\001\002\000\100\002\uffdd\010\uffdd\012\uffdd\013\063" +
    "\014\061\015\070\016\060\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\057\046" +
    "\073\047\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\100\002\uffe6\010\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\070\016\060\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045\057" +
    "\046\073\047\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\001\002\000\100\002\uffe4\010\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045" +
    "\057\046\uffe4\047\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\001\002\000\100\002\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\001\002\000\004\010\054\001\002" +
    "\000\004\062\121\001\002\000\004\033\122\001\002\000" +
    "\026\010\020\030\012\033\025\047\026\052\005\053\011" +
    "\054\022\055\004\056\007\057\017\001\002\000\030\010" +
    "\020\030\012\033\025\034\125\047\026\052\005\053\011" +
    "\054\022\055\004\056\007\057\017\001\002\000\034\002" +
    "\ufffc\010\ufffc\012\126\030\ufffc\033\ufffc\034\ufffc\047\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001" +
    "\002\000\100\002\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\032\002\ufffd\010\ufffd\030\ufffd\033\ufffd\034" +
    "\ufffd\047\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\001\002\000\032\002\uffff\010\uffff\030\uffff\033" +
    "\uffff\034\uffff\047\uffff\052\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\001\002\000\006\020\uffc3\044\uffc3\001" +
    "\002\000\004\010\054\001\002\000\006\020\133\044\117" +
    "\001\002\000\004\033\134\001\002\000\026\010\020\030" +
    "\012\033\025\047\026\052\005\053\011\054\022\055\004" +
    "\056\007\057\017\001\002\000\030\010\020\030\012\033" +
    "\025\034\136\047\026\052\005\053\011\054\022\055\004" +
    "\056\007\057\017\001\002\000\100\002\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\001\002\000\100\002\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\001\002\000\100\002\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\070\016\060\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\044\uffe0\045\057\046\073\047\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002\000\100\002\uffe1" +
    "\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\070\016\060\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\044\uffe1\045\057\046\073\047\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\030\004" +
    "\044\005\041\006\040\007\046\010\035\011\042\013\037" +
    "\014\036\017\051\024\043\060\050\001\002\000\044\013" +
    "\063\014\061\015\070\016\060\020\uffc0\021\066\022\072" +
    "\023\074\031\067\032\065\037\075\040\064\041\071\042" +
    "\062\044\uffc0\045\057\046\073\001\002\000\006\020\146" +
    "\044\145\001\002\000\030\004\044\005\041\006\040\007" +
    "\046\010\035\011\042\013\037\014\036\017\051\024\043" +
    "\060\050\001\002\000\100\002\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\001\002\000\044\013\063\014\061\015\070" +
    "\016\060\020\uffc1\021\066\022\072\023\074\031\067\032" +
    "\065\037\075\040\064\041\071\042\062\044\uffc1\045\057" +
    "\046\073\001\002\000\004\033\151\001\002\000\006\050" +
    "\154\051\152\001\002\000\004\026\173\001\002\000\010" +
    "\034\163\050\162\051\161\001\002\000\030\004\044\005" +
    "\041\006\040\007\046\010\035\011\042\013\037\014\036" +
    "\017\051\024\043\060\050\001\002\000\042\013\063\014" +
    "\061\015\070\016\060\021\066\022\072\023\074\026\156" +
    "\031\067\032\065\037\075\040\064\041\071\042\062\045" +
    "\057\046\073\001\002\000\026\010\020\030\012\033\025" +
    "\047\026\052\005\053\011\054\022\055\004\056\007\057" +
    "\017\001\002\000\026\010\020\030\012\033\025\047\026" +
    "\052\005\053\011\054\022\055\004\056\007\057\017\001" +
    "\002\000\036\010\ufff3\012\ufff3\030\ufff3\033\ufff3\034\uffca" +
    "\047\ufff3\050\uffca\051\uffca\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\001\002\000\004\026\170\001\002" +
    "\000\030\004\044\005\041\006\040\007\046\010\035\011" +
    "\042\013\037\014\036\017\051\024\043\060\050\001\002" +
    "\000\100\002\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\026\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\001" +
    "\002\000\042\013\063\014\061\015\070\016\060\021\066" +
    "\022\072\023\074\026\165\031\067\032\065\037\075\040" +
    "\064\041\071\042\062\045\057\046\073\001\002\000\026" +
    "\010\020\030\012\033\025\047\026\052\005\053\011\054" +
    "\022\055\004\056\007\057\017\001\002\000\026\010\020" +
    "\030\012\033\025\047\026\052\005\053\011\054\022\055" +
    "\004\056\007\057\017\001\002\000\036\010\ufff3\012\ufff3" +
    "\030\ufff3\033\ufff3\034\uffcc\047\ufff3\050\uffcc\051\uffcc\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002" +
    "\000\026\010\020\030\012\033\025\047\026\052\005\053" +
    "\011\054\022\055\004\056\007\057\017\001\002\000\026" +
    "\010\020\030\012\033\025\047\026\052\005\053\011\054" +
    "\022\055\004\056\007\057\017\001\002\000\036\010\ufff3" +
    "\012\ufff3\030\ufff3\033\ufff3\034\uffcb\047\ufff3\050\uffcb\051" +
    "\uffcb\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\001\002\000\026\010\020\030\012\033\025\047\026\052" +
    "\005\053\011\054\022\055\004\056\007\057\017\001\002" +
    "\000\026\010\020\030\012\033\025\047\026\052\005\053" +
    "\011\054\022\055\004\056\007\057\017\001\002\000\036" +
    "\010\ufff3\012\ufff3\030\ufff3\033\ufff3\034\uffc9\047\ufff3\050" +
    "\uffc9\051\uffc9\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\001\002\000\030\010\020\030\012\033\025\034" +
    "\177\047\026\052\005\053\011\054\022\055\004\056\007" +
    "\057\017\001\002\000\100\002\uffec\010\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\001\002\000\026\010\020\030\012\033\025" +
    "\047\026\052\005\053\011\054\022\055\004\056\007\057" +
    "\017\001\002\000\030\010\020\030\012\033\025\034\202" +
    "\047\026\052\005\053\011\054\022\055\004\056\007\057" +
    "\017\001\002\000\004\017\203\001\002\000\030\004\044" +
    "\005\041\006\040\007\046\010\035\011\042\013\037\014" +
    "\036\017\051\024\043\060\050\001\002\000\042\013\063" +
    "\014\061\015\070\016\060\020\205\021\066\022\072\023" +
    "\074\031\067\032\065\037\075\040\064\041\071\042\062" +
    "\045\057\046\073\001\002\000\100\002\uffc7\010\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\030\004\044\005\041" +
    "\006\040\007\046\010\035\011\042\013\037\014\036\017" +
    "\051\024\043\060\050\001\002\000\006\020\210\044\145" +
    "\001\002\000\100\002\uffed\010\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\001\002\000\030\004\044\005\041\006\040\007\046" +
    "\010\035\011\042\013\037\014\036\017\051\024\043\060" +
    "\050\001\002\000\104\002\ufff0\010\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\001\002\000\042\013\063\014" +
    "\061\015\070\016\060\020\214\021\066\022\072\023\074" +
    "\031\067\032\065\037\075\040\064\041\071\042\062\045" +
    "\057\046\073\001\002\000\104\002\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\037\uffef\040\uffef\041\uffef\042\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\001\002\000\032\002" +
    "\ufffe\010\ufffe\030\ufffe\033\ufffe\034\ufffe\047\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000" +
    "\030\004\044\005\041\006\040\007\046\010\035\011\042" +
    "\013\037\014\036\017\051\024\043\060\050\001\002\000" +
    "\042\013\063\014\061\015\070\016\060\020\220\021\066" +
    "\022\072\023\074\031\067\032\065\037\075\040\064\041" +
    "\071\042\062\045\057\046\073\001\002\000\004\033\221" +
    "\001\002\000\026\010\020\030\012\033\025\047\026\052" +
    "\005\053\011\054\022\055\004\056\007\057\017\001\002" +
    "\000\030\010\020\030\012\033\025\034\223\047\026\052" +
    "\005\053\011\054\022\055\004\056\007\057\017\001\002" +
    "\000\102\002\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\026\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\224\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\004\030\012\001\002\000\100\002\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\001\002\000\030\004" +
    "\044\005\041\006\040\007\046\010\035\011\042\013\037" +
    "\014\036\017\051\024\043\060\050\001\002\000\042\013" +
    "\063\014\061\015\070\016\060\020\230\021\066\022\072" +
    "\023\074\031\067\032\065\037\075\040\064\041\071\042" +
    "\062\045\057\046\073\001\002\000\004\033\231\001\002" +
    "\000\026\010\020\030\012\033\025\047\026\052\005\053" +
    "\011\054\022\055\004\056\007\057\017\001\002\000\030" +
    "\010\020\030\012\033\025\034\233\047\026\052\005\053" +
    "\011\054\022\055\004\056\007\057\017\001\002\000\100" +
    "\002\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\001\002\000" +
    "\004\010\235\001\002\000\004\061\236\001\002\000\030" +
    "\004\044\005\041\006\040\007\046\010\035\011\042\013" +
    "\037\014\036\017\051\024\043\060\050\001\002\000\042" +
    "\013\063\014\061\015\070\016\060\020\240\021\066\022" +
    "\072\023\074\031\067\032\065\037\075\040\064\041\071" +
    "\042\062\045\057\046\073\001\002\000\004\033\241\001" +
    "\002\000\026\010\020\030\012\033\025\047\026\052\005" +
    "\053\011\054\022\055\004\056\007\057\017\001\002\000" +
    "\030\010\020\030\012\033\025\034\243\047\026\052\005" +
    "\053\011\054\022\055\004\056\007\057\017\001\002\000" +
    "\100\002\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\032\002\030\003\022\004\007\005\013\006" +
    "\012\007\015\011\020\013\005\015\027\016\014\017\026" +
    "\020\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\022\005\123" +
    "\006\012\007\015\011\020\013\005\015\027\016\014\017" +
    "\026\020\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\022\004\175\005\013" +
    "\006\012\007\015\011\020\013\005\015\027\016\014\017" +
    "\026\020\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\044\012\033\021\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\044\012\140\021\046\001" +
    "\001\000\010\010\044\012\137\021\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\044\012\136\021\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\051\022\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\044\012" +
    "\055\021\046\001\001\000\002\001\001\000\010\010\044" +
    "\012\115\021\046\001\001\000\010\010\044\012\114\021" +
    "\046\001\001\000\010\010\044\012\113\021\046\001\001" +
    "\000\010\010\044\012\112\021\046\001\001\000\010\010" +
    "\044\012\111\021\046\001\001\000\010\010\044\012\110" +
    "\021\046\001\001\000\010\010\044\012\107\021\046\001" +
    "\001\000\026\003\022\005\104\006\012\007\015\011\020" +
    "\013\005\015\027\016\014\017\026\020\023\001\001\000" +
    "\010\010\044\012\103\021\046\001\001\000\010\010\044" +
    "\012\102\021\046\001\001\000\010\010\044\012\101\021" +
    "\046\001\001\000\010\010\044\012\100\021\046\001\001" +
    "\000\010\010\044\012\077\021\046\001\001\000\010\010" +
    "\044\012\076\021\046\001\001\000\010\010\044\012\075" +
    "\021\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\022\005\106\006\012\007\015\011\020\013\005\015\027" +
    "\016\014\017\026\020\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\022\004\122\005\013\006\012\007" +
    "\015\011\020\013\005\015\027\016\014\017\026\020\023" +
    "\001\001\000\026\003\022\005\123\006\012\007\015\011" +
    "\020\013\005\015\027\016\014\017\026\020\023\001\001" +
    "\000\004\025\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\051" +
    "\022\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\022\004\134\005\013\006\012\007\015\011\020" +
    "\013\005\015\027\016\014\017\026\020\023\001\001\000" +
    "\026\003\022\005\123\006\012\007\015\011\020\013\005" +
    "\015\027\016\014\017\026\020\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\044\012\142\021\046\023\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\044\012\146" +
    "\021\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\044\012\154\021\046\001" +
    "\001\000\002\001\001\000\030\003\022\004\156\005\013" +
    "\006\012\007\015\011\020\013\005\015\027\016\014\017" +
    "\026\020\023\001\001\000\026\003\022\005\123\006\012" +
    "\007\015\011\020\013\005\015\027\016\014\017\026\020" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\044\012\163\021\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\022\004\165\005\013\006\012" +
    "\007\015\011\020\013\005\015\027\016\014\017\026\020" +
    "\023\001\001\000\026\003\022\005\123\006\012\007\015" +
    "\011\020\013\005\015\027\016\014\017\026\020\166\001" +
    "\001\000\002\001\001\000\030\003\022\004\170\005\013" +
    "\006\012\007\015\011\020\013\005\015\027\016\014\017" +
    "\026\020\023\001\001\000\026\003\022\005\123\006\012" +
    "\007\015\011\020\013\005\015\027\016\014\017\026\020" +
    "\171\001\001\000\002\001\001\000\030\003\022\004\173" +
    "\005\013\006\012\007\015\011\020\013\005\015\027\016" +
    "\014\017\026\020\023\001\001\000\026\003\022\005\123" +
    "\006\012\007\015\011\020\013\005\015\027\016\014\017" +
    "\026\020\174\001\001\000\002\001\001\000\026\003\022" +
    "\005\123\006\012\007\015\011\020\013\005\015\027\016" +
    "\014\017\026\020\023\001\001\000\002\001\001\000\030" +
    "\003\022\004\200\005\013\006\012\007\015\011\020\013" +
    "\005\015\027\016\014\017\026\020\023\001\001\000\026" +
    "\003\022\005\123\006\012\007\015\011\020\013\005\015" +
    "\027\016\014\017\026\020\023\001\001\000\002\001\001" +
    "\000\010\010\044\012\203\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\044\012\142\021\046" +
    "\023\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\044\012\212\021\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\044\012\216\021\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\022\004\221\005\013\006" +
    "\012\007\015\011\020\013\005\015\027\016\014\017\026" +
    "\020\023\001\001\000\026\003\022\005\123\006\012\007" +
    "\015\011\020\013\005\015\027\016\014\017\026\020\023" +
    "\001\001\000\002\001\001\000\004\011\224\001\001\000" +
    "\002\001\001\000\010\010\044\012\226\021\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\022\004" +
    "\231\005\013\006\012\007\015\011\020\013\005\015\027" +
    "\016\014\017\026\020\023\001\001\000\026\003\022\005" +
    "\123\006\012\007\015\011\020\013\005\015\027\016\014" +
    "\017\026\020\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\044\012\236\021\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\022\004\241\005\013\006\012\007\015\011\020\013\005" +
    "\015\027\016\014\017\026\020\023\001\001\000\026\003" +
    "\022\005\123\006\012\007\015\011\020\013\005\015\027" +
    "\016\014\017\026\020\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

    public String salida = "" ; 
    public Instruccion Raiz;   
    public void syntax_error(Symbol s)
    {
         

        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    private int A(String S){

        return   Integer.parseInt(S);
    }

    public void setSalida(String cadena)
    {
        salida = cadena;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; Raiz=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO INSTR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a; ((Cuerpo)RESULT).Agregar(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= INSTR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Cuerpo();  ((Cuerpo)RESULT).Agregar(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PUNTOCOMA ::= puntocom 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUNTOCOMA ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTR ::= BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTR ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTR ::= SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTR ::= SUITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTR ::= MIENTRAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTR ::= HACERMIENTRAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTR ::= PARACICLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTR ::= LLAMADO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTR ::= TRANS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TRANS ::= breakp 
            {
              Instruccion RESULT =null;
		RESULT=new Detencion(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TRANS ::= continuep 
            {
              Instruccion RESULT =null;
		RESULT=new Detencion(2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TRANS ::= returnp RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Detencion(3,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RETORNO ::= para VALOR parc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RETORNO ::= 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADO ::= id para LISTAVAL parc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new LlamarFuncion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE ::= llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Bloque(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= id igual VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Asignacion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TERNARIO ::= VALOR interro INSTR doblepunto INSTR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Ternario(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SI ::= ifv para VALOR parc llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Si(a,b,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SI ::= ifv para VALOR parc llaa CUERPO llac elses SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Si(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= VALOR suma VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= VALOR resta VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= VALOR multi VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= VALOR div VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= VALOR potencia VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= VALOR modular VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= resta VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= suma VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= id para LISTAVAL parc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Valor("valorfuncion",b,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= id 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("var",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= VALOR igualdoble VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= VALOR diferente VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= VALOR mayorigual VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= VALOR menorigual VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= VALOR may VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= VALOR men VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= admira VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= VALOR or VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= VALOR and VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor(b,a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= caracter 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("char",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("declafuncion",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR ::= entero 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("entero",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("cadena",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= booleano 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("booleano",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= decimal 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Valor("decimal",a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR ::= TERNARIO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUITCH ::= suitc para VALOR parc llaa CUERPOSUITCH llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		((Suitch)b).AgregarValor(a);RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPOSUITCH ::= CUERPOSUITCH casep VALOR doblepunto CUERPO TRANS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; ((Suitch)RESULT).Agregar(new CuerpoSuitch(b,c,d),true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOSUITCH ::= CUERPOSUITCH defaultp doblepunto CUERPO TRANS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; ((Suitch)RESULT).Agregar(new CuerpoSuitch(b,c),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOSUITCH ::= casep VALOR doblepunto CUERPO TRANS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Suitch S= new Suitch(); S.Agregar(new CuerpoSuitch(a,b,c),true); RESULT=S;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPOSUITCH ::= defaultp doblepunto CUERPO TRANS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Suitch S= new Suitch(); S.Agregar(new CuerpoSuitch(a,b),false); RESULT=S;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MIENTRAS ::= whilep para VALOR parc llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // HACERMIENTRAS ::= dop llaa CUERPO llac para VALOR parc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new HacerMientras(b,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARACICLO ::= forp para id inp VALOR parc llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ParaCiclo(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACICLO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= functionpp para LISTAPARAM parc llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Funcion(a,b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= para LISTAPARAM parc flecha llaa CUERPO llac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Funcion(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAPARAM ::= LISTAPARAM coma ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListaParametros)a).Agregar(b);  RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAPARAM ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ListaParametros(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTAVAL ::= LISTAVAL coma VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListaValores)a).Agregar(b);  RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTAVAL ::= VALOR 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new ListaValores(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
