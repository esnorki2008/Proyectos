
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Arbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\003\007\000\002\006" +
    "\005\000\002\007\004\000\002\010\004\000\002\010\002" +
    "\000\002\011\007\000\002\012\011\000\002\012\013\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\013\006\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\011\000" +
    "\002\015\010\000\002\015\007\000\002\015\007\000\002" +
    "\015\006\000\002\016\011\000\002\017\012\000\002\020" +
    "\013\000\002\021\004\000\002\021\004\000\002\021\005" +
    "\000\002\026\003\000\002\026\002\000\002\022\011\000" +
    "\002\022\006\000\002\023\005\000\002\023\003\000\002" +
    "\024\010\000\002\024\002\000\002\025\005\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\052\004\037\005\012\006\006\007\017\010" +
    "\030\011\023\013\043\014\024\017\007\024\026\030\016" +
    "\033\036\047\040\052\005\053\013\054\032\055\004\056" +
    "\011\057\027\060\015\001\002\000\004\017\242\001\002" +
    "\000\004\012\241\001\002\000\050\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\004\010\212" +
    "\001\002\000\060\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\017\ufff9\024\ufff9" +
    "\026\ufff9\030\ufff9\033\ufff9\034\ufff9\047\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002" +
    "\000\004\012\227\001\002\000\050\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\026\uffd3\031\uffd3\032\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\004\017\221" +
    "\001\002\000\054\002\000\004\037\005\012\006\006\007" +
    "\017\010\030\011\023\013\043\014\024\017\007\024\026" +
    "\030\016\033\036\047\040\052\005\053\013\054\032\055" +
    "\004\056\011\057\027\060\015\001\002\000\004\017\207" +
    "\001\002\000\004\017\177\001\002\000\050\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\026\uffd4\031\uffd4\032\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\060" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\013\ufffd\014\ufffd\017\ufffd\024\ufffd\026\ufffd\030\ufffd" +
    "\033\ufffd\034\ufffd\047\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002\000\056\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013" +
    "\ufffe\014\ufffe\017\ufffe\024\ufffe\030\ufffe\033\ufffe\034\ufffe" +
    "\047\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\001\002\000\060\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7\017" +
    "\ufff7\024\ufff7\026\ufff7\030\ufff7\033\ufff7\034\ufff7\047\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\001\002\000\050\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\031" +
    "\uffd8\032\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\001\002\000\030\004\037\005\012\006" +
    "\006\007\017\010\070\011\023\013\043\014\024\017\007" +
    "\024\026\060\015\001\002\000\004\012\175\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\032\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\012\uffc6\013\043\014\024\017\007\024\026\060\015\001" +
    "\002\000\046\012\uffef\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\162\021\uffe2\022\uffe2\023\uffe2\025\163\031\uffe2\032" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2" +
    "\001\002\000\060\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\017\ufffa\024\ufffa" +
    "\026\ufffa\030\ufffa\033\ufffa\034\ufffa\047\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\001\002" +
    "\000\004\033\153\001\002\000\060\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\017\ufff4\024\ufff4\026\ufff4\030\ufff4\033\ufff4\034\ufff4\047" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\001\002\000\060\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\017\ufff5" +
    "\024\ufff5\026\ufff5\030\ufff5\033\ufff5\034\ufff5\047\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\001\002\000\060\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\017\ufffb\024\ufffb" +
    "\026\ufffb\030\ufffb\033\ufffb\034\ufffb\047\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002" +
    "\000\052\004\037\005\012\006\006\007\017\010\030\011" +
    "\023\013\043\014\024\017\007\024\026\030\016\033\036" +
    "\047\040\052\005\053\013\054\032\055\004\056\011\057" +
    "\027\060\015\001\002\000\050\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\026" +
    "\uffd6\031\uffd6\032\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\001\002\000\004\017\120\001" +
    "\002\000\060\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\013\ufff6\014\ufff6\017\ufff6\024\ufff6\026" +
    "\ufff6\030\ufff6\033\ufff6\034\ufff6\047\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002\000" +
    "\060\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\013\ufff8\014\ufff8\017\ufff8\024\ufff8\026\ufff8\030" +
    "\ufff8\033\ufff8\034\ufff8\047\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002\000\030\004" +
    "\037\005\012\006\006\007\017\010\070\011\023\013\043" +
    "\014\024\017\007\024\026\060\015\001\002\000\040\013" +
    "\054\014\052\015\061\016\051\021\057\022\063\023\065" +
    "\031\060\032\056\037\066\040\055\041\062\042\053\045" +
    "\050\046\064\001\002\000\004\002\047\001\002\000\050" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\026\uffd7\031\uffd7\032\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\001" +
    "\002\000\004\002\001\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\052\004\037\005\012" +
    "\006\006\007\017\010\030\011\023\013\043\014\024\017" +
    "\007\024\026\030\016\033\036\047\040\052\005\053\013" +
    "\054\032\055\004\056\011\057\027\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\050\012\uffde\013\054\014\052\015\061\016\051\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\026\uffde\031\uffde\032\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045\050\046\064" +
    "\001\002\000\052\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\071\020\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\031\uffe2\032\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\001\002\000\030\004\037\005\012" +
    "\006\006\007\017\010\070\011\023\013\043\014\024\017" +
    "\007\024\026\060\015\001\002\000\042\013\054\014\052" +
    "\015\061\016\051\020\uffbe\022\063\023\065\031\060\032" +
    "\056\037\066\040\055\041\062\042\053\044\uffbe\045\050" +
    "\046\064\001\002\000\006\020\075\044\074\001\002\000" +
    "\030\004\037\005\012\006\006\007\017\010\070\011\023" +
    "\013\043\014\024\017\007\024\026\060\015\001\002\000" +
    "\050\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\026\uffe3\031\uffe3\032\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\001\002\000\042\013\054\014\052\015\061\016\051\020" +
    "\uffbf\022\063\023\065\031\060\032\056\037\066\040\055" +
    "\041\062\042\053\044\uffbf\045\050\046\064\001\002\000" +
    "\050\012\uffdc\013\054\014\052\015\061\016\051\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\026\uffdc\031\uffdc\032\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\045\050\046\064" +
    "\001\002\000\050\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\031\uffe6" +
    "\032\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045" +
    "\050\046\uffe6\001\002\000\050\012\uffdd\013\054\014\052" +
    "\015\061\016\051\020\uffdd\021\uffdd\022\uffdd\023\uffdd\026" +
    "\uffdd\031\uffdd\032\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\045\050\046\064\001\002\000\050\012\uffe0\013" +
    "\054\014\052\015\061\016\051\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\031\uffe0\032\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\044\uffe0\045\050\046\064\001\002\000\050" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\026\uffe9\031\uffe9\032\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\050\046\uffe9\001" +
    "\002\000\050\012\uffd9\013\054\014\052\015\061\016\051" +
    "\020\uffd9\021\uffd9\022\063\023\065\026\uffd9\031\uffd9\032" +
    "\uffd9\037\066\040\055\041\062\042\053\044\uffd9\045\050" +
    "\046\064\001\002\000\004\026\106\001\002\000\052\004" +
    "\037\005\012\006\006\007\017\010\030\011\023\013\043" +
    "\014\024\017\007\024\026\030\016\033\036\047\040\052" +
    "\005\053\013\054\032\055\004\056\011\057\027\060\015" +
    "\001\002\000\060\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\013\uffee\014\uffee\017\uffee\024\uffee" +
    "\026\uffee\030\uffee\033\uffee\034\uffee\047\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\001\002" +
    "\000\050\012\uffda\013\054\014\052\015\061\016\051\020" +
    "\uffda\021\uffda\022\063\023\065\026\uffda\031\060\032\uffda" +
    "\037\066\040\055\041\062\042\053\044\uffda\045\050\046" +
    "\064\001\002\000\050\012\uffdf\013\054\014\052\015\061" +
    "\016\051\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\031" +
    "\uffdf\032\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf" +
    "\045\050\046\064\001\002\000\050\012\uffeb\013\uffeb\014" +
    "\uffeb\015\061\016\051\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\026\uffeb\031\uffeb\032\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\044\uffeb\045\050\046\064\001\002\000\050\012\uffe1" +
    "\013\054\014\052\015\061\016\051\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\031\uffe1\032\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\044\uffe1\045\050\046\064\001\002\000" +
    "\050\012\uffea\013\uffea\014\uffea\015\061\016\051\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\026\uffea\031\uffea\032\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045\050\046\064" +
    "\001\002\000\050\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\031\uffe8" +
    "\032\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8\045" +
    "\050\046\uffe8\001\002\000\050\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026" +
    "\uffe7\031\uffe7\032\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\001\002\000\050\012\uffe4\013" +
    "\uffe4\014\uffe4\015\061\016\051\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\026\uffe4\031\uffe4\032\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\044\uffe4\045\050\046\064\001\002\000\030" +
    "\004\037\005\012\006\006\007\017\010\070\011\023\013" +
    "\043\014\024\017\007\024\026\060\015\001\002\000\040" +
    "\013\054\014\052\015\061\016\051\020\122\022\063\023" +
    "\065\031\060\032\056\037\066\040\055\041\062\042\053" +
    "\045\050\046\064\001\002\000\004\033\123\001\002\000" +
    "\006\050\126\051\124\001\002\000\004\026\146\001\002" +
    "\000\010\034\136\050\135\051\134\001\002\000\030\004" +
    "\037\005\012\006\006\007\017\010\070\011\023\013\043" +
    "\014\024\017\007\024\026\060\015\001\002\000\040\013" +
    "\054\014\052\015\061\016\051\022\063\023\065\026\130" +
    "\031\060\032\056\037\066\040\055\041\062\042\053\045" +
    "\050\046\064\001\002\000\052\004\037\005\012\006\006" +
    "\007\017\010\030\011\023\013\043\014\024\017\007\024" +
    "\026\030\016\033\036\047\040\052\005\053\013\054\032" +
    "\055\004\056\011\057\027\060\015\001\002\000\052\004" +
    "\037\005\012\006\006\007\017\010\030\011\023\013\043" +
    "\014\024\017\007\024\026\030\016\033\036\047\040\052" +
    "\005\053\013\054\032\055\004\056\011\057\027\060\015" +
    "\001\002\000\056\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\013\uffff\014\uffff\017\uffff\024\uffff" +
    "\030\uffff\033\uffff\034\uffff\047\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\001\002\000\060" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\017\ufff5\024\ufff5\030\ufff5\033\ufff5\034\uffcf" +
    "\047\ufff5\050\uffcf\051\uffcf\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\004\026\143" +
    "\001\002\000\030\004\037\005\012\006\006\007\017\010" +
    "\070\011\023\013\043\014\024\017\007\024\026\060\015" +
    "\001\002\000\060\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\017\uffd2\024\uffd2" +
    "\026\uffd2\030\uffd2\033\uffd2\034\uffd2\047\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002" +
    "\000\040\013\054\014\052\015\061\016\051\022\063\023" +
    "\065\026\140\031\060\032\056\037\066\040\055\041\062" +
    "\042\053\045\050\046\064\001\002\000\052\004\037\005" +
    "\012\006\006\007\017\010\030\011\023\013\043\014\024" +
    "\017\007\024\026\030\016\033\036\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\052\004\037\005\012\006\006\007\017\010\030\011" +
    "\023\013\043\014\024\017\007\024\026\030\016\033\036" +
    "\047\040\052\005\053\013\054\032\055\004\056\011\057" +
    "\027\060\015\001\002\000\060\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\017\ufff5\024" +
    "\ufff5\030\ufff5\033\ufff5\034\uffd1\047\ufff5\050\uffd1\051\uffd1" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\001\002\000\052\004\037\005\012\006\006\007\017" +
    "\010\030\011\023\013\043\014\024\017\007\024\026\030" +
    "\016\033\036\047\040\052\005\053\013\054\032\055\004" +
    "\056\011\057\027\060\015\001\002\000\052\004\037\005" +
    "\012\006\006\007\017\010\030\011\023\013\043\014\024" +
    "\017\007\024\026\030\016\033\036\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\060\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\014\ufff5\017\ufff5\024\ufff5\030\ufff5\033\ufff5" +
    "\034\uffd0\047\ufff5\050\uffd0\051\uffd0\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\052" +
    "\004\037\005\012\006\006\007\017\010\030\011\023\013" +
    "\043\014\024\017\007\024\026\030\016\033\036\047\040" +
    "\052\005\053\013\054\032\055\004\056\011\057\027\060" +
    "\015\001\002\000\052\004\037\005\012\006\006\007\017" +
    "\010\030\011\023\013\043\014\024\017\007\024\026\030" +
    "\016\033\036\047\040\052\005\053\013\054\032\055\004" +
    "\056\011\057\027\060\015\001\002\000\060\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\017\ufff5\024\ufff5\030\ufff5\033\ufff5\034\uffce\047\ufff5\050" +
    "\uffce\051\uffce\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\001\002\000\054\004\037\005\012\006" +
    "\006\007\017\010\030\011\023\013\043\014\024\017\007" +
    "\024\026\030\016\033\036\034\152\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\060\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\017\ufff2\024\ufff2\026\ufff2" +
    "\030\ufff2\033\ufff2\034\ufff2\047\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\001\002\000\052" +
    "\004\037\005\012\006\006\007\017\010\030\011\023\013" +
    "\043\014\024\017\007\024\026\030\016\033\036\047\040" +
    "\052\005\053\013\054\032\055\004\056\011\057\027\060" +
    "\015\001\002\000\054\004\037\005\012\006\006\007\017" +
    "\010\030\011\023\013\043\014\024\017\007\024\026\030" +
    "\016\033\036\034\155\047\040\052\005\053\013\054\032" +
    "\055\004\056\011\057\027\060\015\001\002\000\004\017" +
    "\156\001\002\000\030\004\037\005\012\006\006\007\017" +
    "\010\070\011\023\013\043\014\024\017\007\024\026\060" +
    "\015\001\002\000\040\013\054\014\052\015\061\016\051" +
    "\020\160\022\063\023\065\031\060\032\056\037\066\040" +
    "\055\041\062\042\053\045\050\046\064\001\002\000\004" +
    "\012\161\001\002\000\060\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\017\uffcc" +
    "\024\uffcc\026\uffcc\030\uffcc\033\uffcc\034\uffcc\047\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\001\002\000\030\004\037\005\012\006\006\007\017\010" +
    "\070\011\023\013\043\014\024\017\007\024\026\060\015" +
    "\001\002\000\030\004\037\005\012\006\006\007\017\010" +
    "\070\011\023\013\043\014\024\017\007\024\026\060\015" +
    "\001\002\000\010\012\ufff1\020\ufff1\044\ufff1\001\002\000" +
    "\044\012\ufff0\013\054\014\052\015\061\016\051\020\ufff0" +
    "\022\063\023\065\031\060\032\056\037\066\040\055\041" +
    "\062\042\053\044\ufff0\045\050\046\064\001\002\000\006" +
    "\020\167\044\074\001\002\000\042\012\170\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\045\uffe3\046" +
    "\uffe3\001\002\000\060\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\017\ufff3\024" +
    "\ufff3\026\ufff3\030\ufff3\033\ufff3\034\ufff3\047\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\001" +
    "\002\000\040\012\uffc7\013\054\014\052\015\061\016\051" +
    "\022\063\023\065\031\060\032\056\037\066\040\055\041" +
    "\062\042\053\045\050\046\064\001\002\000\004\012\173" +
    "\001\002\000\064\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\017\uffc8\024\uffc8" +
    "\026\uffc8\030\uffc8\033\uffc8\034\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\050\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb" +
    "\031\uffdb\032\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\001\002\000\060\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014" +
    "\ufffc\017\ufffc\024\ufffc\026\ufffc\030\ufffc\033\ufffc\034\ufffc" +
    "\047\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\001\002\000\050\012\uffe5\013\uffe5\014\uffe5" +
    "\015\061\016\051\020\uffe5\021\uffe5\022\uffe5\023\uffe5\026" +
    "\uffe5\031\uffe5\032\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\044\uffe5\045\050\046\064\001\002\000\030\004\037\005" +
    "\012\006\006\007\017\010\070\011\023\013\043\014\024" +
    "\017\007\024\026\060\015\001\002\000\040\013\054\014" +
    "\052\015\061\016\051\020\201\022\063\023\065\031\060" +
    "\032\056\037\066\040\055\041\062\042\053\045\050\046" +
    "\064\001\002\000\004\033\202\001\002\000\052\004\037" +
    "\005\012\006\006\007\017\010\030\011\023\013\043\014" +
    "\024\017\007\024\026\030\016\033\036\047\040\052\005" +
    "\053\013\054\032\055\004\056\011\057\027\060\015\001" +
    "\002\000\054\004\037\005\012\006\006\007\017\010\030" +
    "\011\023\013\043\014\024\017\007\024\026\030\016\033" +
    "\036\034\204\047\040\052\005\053\013\054\032\055\004" +
    "\056\011\057\027\060\015\001\002\000\062\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\017\uffed\024\uffed\026\uffed\030\uffed\033\uffed\034" +
    "\uffed\043\205\047\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\001\002\000\052\004\037\005" +
    "\012\006\006\007\017\010\030\011\023\013\043\014\024" +
    "\017\007\024\026\030\016\033\036\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\060\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\013\uffec\014\uffec\017\uffec\024\uffec\026\uffec" +
    "\030\uffec\033\uffec\034\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\001\002\000\004" +
    "\010\212\001\002\000\006\020\uffc2\044\uffc2\001\002\000" +
    "\006\020\214\044\213\001\002\000\010\020\uffef\025\163" +
    "\044\uffef\001\002\000\004\010\212\001\002\000\004\033" +
    "\215\001\002\000\052\004\037\005\012\006\006\007\017" +
    "\010\030\011\023\013\043\014\024\017\007\024\026\030" +
    "\016\033\036\047\040\052\005\053\013\054\032\055\004" +
    "\056\011\057\027\060\015\001\002\000\054\004\037\005" +
    "\012\006\006\007\017\010\030\011\023\013\043\014\024" +
    "\017\007\024\026\030\016\033\036\034\217\047\040\052" +
    "\005\053\013\054\032\055\004\056\011\057\027\060\015" +
    "\001\002\000\050\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\031\uffc5" +
    "\032\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\001\002\000\006\020\uffc3\044\uffc3\001\002" +
    "\000\030\004\037\005\012\006\006\007\017\010\070\011" +
    "\023\013\043\014\024\017\007\024\026\060\015\001\002" +
    "\000\040\013\054\014\052\015\061\016\051\020\223\022" +
    "\063\023\065\031\060\032\056\037\066\040\055\041\062" +
    "\042\053\045\050\046\064\001\002\000\004\033\224\001" +
    "\002\000\052\004\037\005\012\006\006\007\017\010\030" +
    "\011\023\013\043\014\024\017\007\024\026\030\016\033" +
    "\036\047\040\052\005\053\013\054\032\055\004\056\011" +
    "\057\027\060\015\001\002\000\054\004\037\005\012\006" +
    "\006\007\017\010\030\011\023\013\043\014\024\017\007" +
    "\024\026\030\016\033\036\034\226\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\060\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\013\uffcd\014\uffcd\017\uffcd\024\uffcd\026\uffcd" +
    "\030\uffcd\033\uffcd\034\uffcd\047\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000\064" +
    "\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\013\uffc9\014\uffc9\017\uffc9\024\uffc9\026\uffc9\030\uffc9" +
    "\033\uffc9\034\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002" +
    "\000\006\020\231\044\213\001\002\000\052\010\212\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\026\uffc0\031\uffc0\032\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\001\002" +
    "\000\050\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\031\uffc4\032\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\001\002\000\006\020\234\044\213\001\002\000\004" +
    "\062\235\001\002\000\004\033\236\001\002\000\052\004" +
    "\037\005\012\006\006\007\017\010\030\011\023\013\043" +
    "\014\024\017\007\024\026\030\016\033\036\047\040\052" +
    "\005\053\013\054\032\055\004\056\011\057\027\060\015" +
    "\001\002\000\054\004\037\005\012\006\006\007\017\010" +
    "\030\011\023\013\043\014\024\017\007\024\026\030\016" +
    "\033\036\034\240\047\040\052\005\053\013\054\032\055" +
    "\004\056\011\057\027\060\015\001\002\000\050\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\026\uffc1\031\uffc1\032\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002\000" +
    "\064\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\013\uffca\014\uffca\017\uffca\024\uffca\026\uffca\030" +
    "\uffca\033\uffca\034\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\001" +
    "\002\000\004\010\243\001\002\000\004\061\244\001\002" +
    "\000\030\004\037\005\012\006\006\007\017\010\070\011" +
    "\023\013\043\014\024\017\007\024\026\060\015\001\002" +
    "\000\040\013\054\014\052\015\061\016\051\020\246\022" +
    "\063\023\065\031\060\032\056\037\066\040\055\041\062" +
    "\042\053\045\050\046\064\001\002\000\004\033\247\001" +
    "\002\000\052\004\037\005\012\006\006\007\017\010\030" +
    "\011\023\013\043\014\024\017\007\024\026\030\016\033" +
    "\036\047\040\052\005\053\013\054\032\055\004\056\011" +
    "\057\027\060\015\001\002\000\054\004\037\005\012\006" +
    "\006\007\017\010\030\011\023\013\043\014\024\017\007" +
    "\024\026\030\016\033\036\034\251\047\040\052\005\053" +
    "\013\054\032\055\004\056\011\057\027\060\015\001\002" +
    "\000\060\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\013\uffcb\014\uffcb\017\uffcb\024\uffcb\026\uffcb" +
    "\030\uffcb\033\uffcb\034\uffcb\047\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\040\002\044\003\032\004\013\005\020\006" +
    "\017\007\024\011\034\012\030\013\043\014\007\016\041" +
    "\017\021\020\040\021\033\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\207" +
    "\023\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\032\005\131" +
    "\006\017\007\024\011\034\012\030\013\043\014\007\016" +
    "\041\017\021\020\040\021\033\022\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\175\022\045\001\001\000\002\001\001\000" +
    "\006\013\173\022\045\001\001\000\010\013\170\022\045" +
    "\026\171\001\001\000\004\010\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\032\004\150\005\020\006" +
    "\017\007\024\011\034\012\030\013\043\014\007\016\041" +
    "\017\021\020\040\021\033\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\116\022\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\115\022\045\001\001\000\006\013\114\022\045\001" +
    "\001\000\006\013\113\022\045\001\001\000\006\013\112" +
    "\022\045\001\001\000\006\013\111\022\045\001\001\000" +
    "\006\013\110\022\045\001\001\000\006\013\107\022\045" +
    "\001\001\000\034\003\032\005\104\006\017\007\024\011" +
    "\034\012\030\013\043\014\007\016\041\017\021\020\040" +
    "\021\033\022\045\001\001\000\006\013\103\022\045\001" +
    "\001\000\006\013\102\022\045\001\001\000\006\013\101" +
    "\022\045\001\001\000\006\013\100\022\045\001\001\000" +
    "\006\013\077\022\045\001\001\000\006\013\076\022\045" +
    "\001\001\000\006\013\066\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\071\022\045\025\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\075\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\032\005\106\006\017\007\024\011" +
    "\034\012\030\013\043\014\007\016\041\017\021\020\040" +
    "\021\033\022\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\120\022\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\126\022\045" +
    "\001\001\000\002\001\001\000\036\003\032\004\130\005" +
    "\020\006\017\007\024\011\034\012\030\013\043\014\007" +
    "\016\041\017\021\020\040\021\033\022\045\001\001\000" +
    "\034\003\032\005\131\006\017\007\024\011\034\012\030" +
    "\013\043\014\007\016\041\017\021\020\040\021\132\022" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\136\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\032\004\140\005\020" +
    "\006\017\007\024\011\034\012\030\013\043\014\007\016" +
    "\041\017\021\020\040\021\033\022\045\001\001\000\034" +
    "\003\032\005\131\006\017\007\024\011\034\012\030\013" +
    "\043\014\007\016\041\017\021\020\040\021\141\022\045" +
    "\001\001\000\002\001\001\000\036\003\032\004\143\005" +
    "\020\006\017\007\024\011\034\012\030\013\043\014\007" +
    "\016\041\017\021\020\040\021\033\022\045\001\001\000" +
    "\034\003\032\005\131\006\017\007\024\011\034\012\030" +
    "\013\043\014\007\016\041\017\021\020\040\021\144\022" +
    "\045\001\001\000\002\001\001\000\036\003\032\004\146" +
    "\005\020\006\017\007\024\011\034\012\030\013\043\014" +
    "\007\016\041\017\021\020\040\021\033\022\045\001\001" +
    "\000\034\003\032\005\131\006\017\007\024\011\034\012" +
    "\030\013\043\014\007\016\041\017\021\020\040\021\147" +
    "\022\045\001\001\000\002\001\001\000\034\003\032\005" +
    "\131\006\017\007\024\011\034\012\030\013\043\014\007" +
    "\016\041\017\021\020\040\021\033\022\045\001\001\000" +
    "\002\001\001\000\036\003\032\004\153\005\020\006\017" +
    "\007\024\011\034\012\030\013\043\014\007\016\041\017" +
    "\021\020\040\021\033\022\045\001\001\000\034\003\032" +
    "\005\131\006\017\007\024\011\034\012\030\013\043\014" +
    "\007\016\041\017\021\020\040\021\033\022\045\001\001" +
    "\000\002\001\001\000\006\013\156\022\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\071\022\045\025\165\001\001\000\006\013\164\022" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\177\022" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\032\004\202\005\020\006\017\007\024\011\034\012" +
    "\030\013\043\014\007\016\041\017\021\020\040\021\033" +
    "\022\045\001\001\000\034\003\032\005\131\006\017\007" +
    "\024\011\034\012\030\013\043\014\007\016\041\017\021" +
    "\020\040\021\033\022\045\001\001\000\002\001\001\000" +
    "\034\003\032\005\205\006\017\007\024\011\034\012\030" +
    "\013\043\014\007\016\041\017\021\020\040\021\033\022" +
    "\045\001\001\000\002\001\001\000\006\007\207\023\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\163\001\001\000\004\007\217\001\001\000\002\001\001" +
    "\000\036\003\032\004\215\005\020\006\017\007\024\011" +
    "\034\012\030\013\043\014\007\016\041\017\021\020\040" +
    "\021\033\022\045\001\001\000\034\003\032\005\131\006" +
    "\017\007\024\011\034\012\030\013\043\014\007\016\041" +
    "\017\021\020\040\021\033\022\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\221\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\032\004" +
    "\224\005\020\006\017\007\024\011\034\012\030\013\043" +
    "\014\007\016\041\017\021\020\040\021\033\022\045\001" +
    "\001\000\034\003\032\005\131\006\017\007\024\011\034" +
    "\012\030\013\043\014\007\016\041\017\021\020\040\021" +
    "\033\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\207\023\232\024\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\032\004\236\005\020\006" +
    "\017\007\024\011\034\012\030\013\043\014\007\016\041" +
    "\017\021\020\040\021\033\022\045\001\001\000\034\003" +
    "\032\005\131\006\017\007\024\011\034\012\030\013\043" +
    "\014\007\016\041\017\021\020\040\021\033\022\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\244\022\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\032\004\247" +
    "\005\020\006\017\007\024\011\034\012\030\013\043\014" +
    "\007\016\041\017\021\020\040\021\033\022\045\001\001" +
    "\000\034\003\032\005\131\006\017\007\024\011\034\012" +
    "\030\013\043\014\007\016\041\017\021\020\040\021\033" +
    "\022\045\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

    public String salida = "" ; 
       
    public void syntax_error(Symbol s)
    {
         

        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");            
    }
    private int A(String S){

        return   Integer.parseInt(S);
    }

    public void setSalida(String cadena)
    {
        salida = cadena;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO INSTR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; RESULT.Agregar(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= INSTR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Nodo("CUERPO");  RESULT.Agregar(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTR ::= BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTR ::= ASIGNACION puntocom 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTR ::= TERNARIO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTR ::= SI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTR ::= SUITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTR ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTR ::= HACERMIENTRAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTR ::= PARACICLO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTR ::= TRANS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LLAMADO ::= id para LISTAVAL parc puntocom 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Nodo("LLAMADO"); RESULT.Agregar(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE ::= llaa CUERPO llac 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Nodo("BLOQUE"); RESULT.Agregar(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= id DECLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Nodo("ASIGNACION"); RESULT.Agregar(a) RESULT.Agregar(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA ::= igual VALOR 
            {
              Nodo RESULT =null;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("DEFECTO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TERNARIO ::= VALOR interro INSTR doblepunto INSTR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SI ::= ifv para VALOR parc llaa CUERPO llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SI ::= ifv para VALOR parc llaa CUERPO llac elses INSTR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= VALOR suma VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= VALOR resta VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= VALOR multi VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= VALOR div VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= VALOR potencia VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= VALOR modular VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= resta VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= suma VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= id para LISTAVAL parc 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= VALOR igualdoble VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= VALOR diferente VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= VALOR mayorigual VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= VALOR menorigual VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= VALOR may VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= VALOR men VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= admira VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= VALOR or VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= VALOR and VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= caracter 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= FUNCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= booleano 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SUITCH ::= suitc para VALOR parc llaa CUERPOSUITCH llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOSUITCH ::= CUERPOSUITCH casep VALOR doblepunto CUERPO TRANS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPOSUITCH ::= CUERPOSUITCH defaultp doblepunto CUERPO TRANS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPOSUITCH ::= casep VALOR doblepunto CUERPO TRANS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOSUITCH ::= defaultp doblepunto CUERPO TRANS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSUITCH",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MIENTRAS ::= whilep para VALOR parc llaa CUERPO llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // HACERMIENTRAS ::= dop llaa CUERPO llac para VALOR parc puntocom 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARACICLO ::= forp para id inp VALOR parc llaa CUERPO llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACICLO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TRANS ::= breakp puntocom 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TRANS ::= continuep puntocom 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TRANS ::= returnp RETORNO puntocom 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETORNO ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETORNO ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= functionpp para LISTAPARAM parc llaa CUERPO llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= para LISTAPARAM parc FUNCIONP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAPARAM ::= LISTAPARAM coma ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAPARAM ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCIONP ::= LISTAPARAM parc flecha llaa CUERPO llac 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCIONP ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTAVAL ::= LISTAVAL coma VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTAVAL ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
